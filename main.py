"""
HR Admin Panel v2.0 - –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä
–ü—Ä–æ—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å —É–º–Ω—ã–º–∏ –ò–ò –∞–≥–µ–Ω—Ç–∞–º–∏
"""

import json
import logging
from pathlib import Path
from typing import Dict, Any, Optional, List
from datetime import datetime

# FastAPI
from fastapi import FastAPI, Request, WebSocket, WebSocketDisconnect, Form, File, UploadFile, HTTPException
from fastapi.responses import HTMLResponse, RedirectResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
# from fastapi.middleware.sessions import SessionMiddleware
from starlette.middleware.sessions import SessionMiddleware
import uvicorn

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ —Ä–æ–ª–∏
from config import *
from users import find_user, update_last_login, get_demo_credentials
from roles import (
    get_user_role_name, 
    can_user_create_profession,
    can_user_approve_profession,
    can_user_return_to_hr,
    can_user_view_questions,
    can_user_access_profession,
    PROFESSION_STATUSES
)

# –ò–ò –∞–≥–µ–Ω—Ç—ã
from ai_agents import HRAssistant, TagsGenerator, HeadApproval, QuestionsGenerator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="HR Admin Panel v2.0",
    description="–£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π —Å –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∞–º–∏",
    version="2.0.0"
)

# Middleware –¥–ª—è —Å–µ—Å—Å–∏–π
app.add_middleware(SessionMiddleware, secret_key="hr-admin-panel-v2-secret-key-2025")

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏ —à–∞–±–ª–æ–Ω—ã
app.mount("/static", StaticFiles(directory=STATIC_DIR), name="static")
templates = Jinja2Templates(directory=TEMPLATES_DIR)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ò–ò –∞–≥–µ–Ω—Ç–æ–≤
hr_assistant = HRAssistant(OPENAI_API_KEY, DATA_DIR)
tags_generator = TagsGenerator(OPENAI_API_KEY, DATA_DIR)
head_approval = HeadApproval(OPENAI_API_KEY, DATA_DIR)
questions_generator = QuestionsGenerator(OPENAI_API_KEY, DATA_DIR)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
scheduler = AsyncIOScheduler()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
active_connections: Dict[str, WebSocket] = {}

# === –°–û–ë–´–¢–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ HR Admin Panel v2.0")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
    await update_reference_files()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.start()
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00
    scheduler.add_job(
        func=daily_questions_generation,
        trigger=CronTrigger(hour=0, minute=0),
        id='daily_questions_generation',
        replace_existing=True
    )
    
    logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")

@app.on_event("shutdown")
async def shutdown_event():
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
    scheduler.shutdown()
    logger.info("üí§ HR Admin Panel –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# === –û–°–ù–û–í–ù–´–ï –ú–ê–†–®–†–£–¢–´ ===

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - —Ä–µ–¥–∏—Ä–µ–∫—Ç"""
    return RedirectResponse(url="/login")

@app.get("/login", response_class=HTMLResponse)
async def login_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞"""
    return templates.TemplateResponse("login.html", {
        "request": request,
        "demo_accounts": get_demo_credentials(),
        "organization": ORGANIZATION
    })

@app.post("/login")
async def login(request: Request, email: str = Form(...), password: str = Form(...)):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞"""
    user = find_user(email, password)
    if user:
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
        update_last_login(user["id"], datetime.now().isoformat())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é
        request.session["user"] = user
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª: {user['name']} ({user['email']})")
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if can_user_create_profession(user["role"]):
            return RedirectResponse(url="/create-profession", status_code=303)
        elif can_user_approve_profession(user["role"]):
            return RedirectResponse(url="/pending-approvals", status_code=303)
        elif can_user_view_questions(user["role"]):
            return RedirectResponse(url="/questions", status_code=303)
        else:
            return RedirectResponse(url="/dashboard", status_code=303)
    else:
        logger.warning(f"‚ùå –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: {email}")
        return templates.TemplateResponse("login.html", {
            "request": request,
            "error": "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
            "demo_accounts": get_demo_credentials(),
            "organization": ORGANIZATION
        })

@app.get("/logout")
async def logout(request: Request):
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    user = request.session.get("user")
    if user:
        logger.info(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª: {user['name']}")
    request.session.clear()
    return RedirectResponse(url="/login")

@app.get("/dashboard", response_class=HTMLResponse)
async def dashboard(request: Request):
    """–î–∞—à–±–æ—Ä–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = request.session.get("user")
    if not user:
        return RedirectResponse(url="/login")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stats = await get_user_statistics(user)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–¥–ª—è –Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–≤)
    pending_notifications = []
    if can_user_approve_profession(user["role"]):
        pending_professions = get_pending_professions_for_user(user)
        if pending_professions:
            pending_notifications.append({
                "type": "pending_approvals",
                "count": len(pending_professions),
                "message": f"–£ –≤–∞—Å {len(pending_professions)} –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –æ–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
                "action_url": "/pending-approvals"
            })
    
    return templates.TemplateResponse("dashboard.html", {
        "request": request,
        "user": user,
        "user_role_name": get_user_role_name(user["role"]),
        "stats": stats,
        "notifications": pending_notifications,
        "can_create": can_user_create_profession(user["role"]),
        "can_approve": can_user_approve_profession(user["role"]),
        "can_view_questions": can_user_view_questions(user["role"])
    })

# === –°–û–ó–î–ê–ù–ò–ï –ü–†–û–§–ï–°–°–ò–ô ===

@app.get("/create-profession", response_class=HTMLResponse)
async def create_profession_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"""
    user = request.session.get("user")
    if not user:
        return RedirectResponse(url="/login")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ
    if not can_user_create_profession(user["role"]):
        return templates.TemplateResponse("access_denied.html", {
            "request": request,
            "user": user,
            "user_role_name": get_user_role_name(user["role"]),
            "message": "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π",
            "allowed_roles": ["super_admin", "hr_head_admin"]
        })
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
    reference_data = load_reference_data()
    
    return templates.TemplateResponse("create_profession.html", {
        "request": request,
        "user": user,
        "user_role_name": get_user_role_name(user["role"]),
        "departments": reference_data.get("departments", []),
        "professions": reference_data.get("professions", []),
        "specializations": reference_data.get("specializations", [])
    })

@app.post("/api/analyze-file")
async def analyze_file(request: Request, file: UploadFile = File(...)):
    """–ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    user = request.session.get("user")
    if not user:
        return JSONResponse({"error": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}, status_code=401)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if file.size > MAX_FILE_SIZE:
            return JSONResponse({"error": "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 10MB)"}, status_code=400)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        file_extension = Path(file.filename).suffix.lower()
        if file_extension not in ALLOWED_EXTENSIONS:
            return JSONResponse({"error": f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_extension}"}, status_code=400)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        file_path = UPLOADS_DIR / f"{user['id']}_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{file.filename}"
        
        with open(file_path, "wb") as buffer:
            content = await file.read()
            buffer.write(content)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ HR Assistant
        analysis_result = await hr_assistant.analyze_file(str(file_path))
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        file_path.unlink(missing_ok=True)
        
        logger.info(f"üìÑ –§–∞–π–ª –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {file.filename} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user['name']}")
        return JSONResponse(analysis_result)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {e}")
        return JSONResponse({"error": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {str(e)}"}, status_code=500)

@app.post("/api/analyze-form")
async def analyze_form(request: Request, form_data: dict):
    """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    user = request.session.get("user")
    if not user:
        return JSONResponse({"error": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}, status_code=401)
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ HR Assistant
        analysis_result = await hr_assistant.analyze_form_data(form_data)
        
        return JSONResponse({
            "success": True,
            "analysis": analysis_result
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã: {e}")
        return JSONResponse({"error": str(e)}, status_code=500)

@app.post("/api/create-profession")
async def create_profession(request: Request, profession_data: dict):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ —Å –ø–æ–ª–Ω—ã–º workflow"""
    user = request.session.get("user")
    if not user:
        return JSONResponse({"error": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}, status_code=401)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if not can_user_create_profession(user["role"]):
        return JSONResponse({"error": "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π"}, status_code=403)
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "created_by_hr"
        profession_id = await save_profession(profession_data, user, "created_by_hr")
        
        # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ Tags Generator
        tags_result = await tags_generator.generate_tags(profession_data)
        
        if tags_result.get("success"):
            # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–≥–∏ –∏ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "tags_generated"
            await update_profession_with_tags(profession_id, tags_result, user)
            
            # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–∏–∫—É –æ—Ç–¥–µ–ª–∞
            await notify_department_head(profession_data, profession_id)
            
            logger.info(f"‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {profession_data.get('bank_title')} (ID: {profession_id}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user['name']}")
            
            return JSONResponse({
                "success": True,
                "profession_id": profession_id,
                "tags_count": len(tags_result["tags"]),
                "message": "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞! –¢–µ–≥–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –ò–ò –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–∏–∫—É –æ—Ç–¥–µ–ª–∞."
            })
        else:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ—Ñ–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ —Ç–µ–≥–∏ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã: {tags_result.get('error')}")
            return JSONResponse({
                "success": True,
                "profession_id": profession_id,
                "warning": "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ —Ç–µ–≥–∏ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞."
            })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: {e}")
        return JSONResponse({"error": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {str(e)}"}, status_code=500)

# === –£–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ü–†–û–§–ï–°–°–ò–ô ===

@app.get("/pending-approvals", response_class=HTMLResponse)
async def pending_approvals_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–≤"""
    user = request.session.get("user")
    if not user:
        return RedirectResponse(url="/login")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if not can_user_approve_profession(user["role"]):
        return templates.TemplateResponse("access_denied.html", {
            "request": request,
            "user": user,
            "user_role_name": get_user_role_name(user["role"]),
            "message": "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π",
            "allowed_roles": ["head_admin", "super_admin"]
        })
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    pending_professions = get_pending_professions_for_user(user)
    
    return templates.TemplateResponse("pending_approvals.html", {
        "request": request,
        "user": user,
        "user_role_name": get_user_role_name(user["role"]),
        "professions": pending_professions,
        "total_pending": len(pending_professions)
    })

@app.get("/api/profession/{profession_id}")
async def get_profession_details(profession_id: str, request: Request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"""
    user = request.session.get("user")
    if not user:
        return JSONResponse({"error": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}, status_code=401)
    
    try:
        profession = get_profession_by_id(profession_id)
        if not profession:
            return JSONResponse({"error": "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}, status_code=404)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not can_user_access_profession(user, profession):
            return JSONResponse({"error": "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"}, status_code=403)
        
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞—á–∞–ª—å–Ω–∏–∫, –¥–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –¥–ª—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        if can_user_approve_profession(user["role"]):
            analysis = await head_approval.analyze_profession_for_approval(
                profession_id, user["department"]
            )
            
            return JSONResponse({
                "success": True,
                "profession": profession,
                "analysis": analysis.get("analysis", {}),
                "recommendations": analysis.get("recommendations", []),
                "suggested_actions": analysis.get("suggested_actions", [])
            })
        else:
            return JSONResponse({
                "success": True,
                "profession": profession
            })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ {profession_id}: {e}")
        return JSONResponse({"error": str(e)}, status_code=500)

@app.post("/api/approve-profession/{profession_id}")
async def approve_profession(profession_id: str, request: Request, approval_data: dict):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–º"""
    user = request.session.get("user")
    if not user:
        return JSONResponse({"error": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}, status_code=401)
    
    try:
        profession = get_profession_by_id(profession_id)
        if not profession:
            return JSONResponse({"error": "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}, status_code=404)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not can_user_approve_profession(user["role"]):
            return JSONResponse({"error": "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π"}, status_code=403)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –∏–∑ –æ—Ç–¥–µ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not can_user_access_profession(user, profession):
            return JSONResponse({"error": "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —ç—Ç–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"}, status_code=403)
        
        action = approval_data.get("action")
        
        if action == "approve":
            # –£—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
            corrected_tags = approval_data.get("tags", profession.get("tags", {}))
            comment = approval_data.get("comment", "")
            
            await approve_profession_by_head(profession_id, corrected_tags, user, comment)
            
            logger.info(f"‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {profession_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user['name']}")
            
            return JSONResponse({
                "success": True,
                "message": "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
            })
            
        elif action == "return_to_hr":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É
            return_reason = approval_data.get("return_reason", "")
            return_comment = approval_data.get("return_comment", "")
            
            await return_profession_to_hr(profession_id, return_reason, return_comment, user)
            
            logger.info(f"‚Ü©Ô∏è –ü—Ä–æ—Ñ–µ—Å—Å–∏—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É: {profession_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user['name']}")
            
            return JSONResponse({
                "success": True,
                "message": "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ HR –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ."
            })
        else:
            return JSONResponse({"error": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"}, status_code=400)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ {profession_id}: {e}")
        return JSONResponse({"error": str(e)}, status_code=500)

# === –ü–†–û–°–ú–û–¢–† –í–û–ü–†–û–°–û–í ===

@app.get("/questions", response_class=HTMLResponse)
async def questions_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ - —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∞"""
    user = request.session.get("user")
    if not user:
        return RedirectResponse(url="/login")
    
    # –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å –≤–æ–ø—Ä–æ—Å—ã
    if not can_user_view_questions(user["role"]):
        return templates.TemplateResponse("access_denied.html", {
            "request": request,
            "user": user,
            "user_role_name": get_user_role_name(user["role"]),
            "message": "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤",
            "allowed_roles": ["super_admin"]
        })
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
    questions_data = get_all_questions()
    
    return templates.TemplateResponse("questions.html", {
        "request": request,
        "user": user,
        "user_role_name": get_user_role_name(user["role"]),
        "questions": questions_data["questions"],
        "stats": questions_data["stats"],
        "total_questions": len(questions_data["questions"])
    })

@app.post("/api/generate-questions/{profession_id}")
async def generate_questions_manual(profession_id: str, request: Request):
    """–†—É—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    user = request.session.get("user")
    if not user:
        return JSONResponse({"error": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}, status_code=401)
    
    # –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã
    if not can_user_view_questions(user["role"]):
        return JSONResponse({"error": "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤"}, status_code=403)
    
    try:
        profession = get_profession_by_id(profession_id)
        if not profession:
            return JSONResponse({"error": "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}, status_code=404)
        
        if profession.get("status") != "approved_by_head":
            return JSONResponse({"error": "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è –µ—â–µ –Ω–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"}, status_code=400)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã
        questions_result = await questions_generator.generate_questions_for_profession(profession)
        
        if questions_result.get("success"):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
            await save_profession_questions(profession_id, questions_result["questions"])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await update_profession_status(profession_id, "questions_generated")
            
            logger.info(f"‚ùì –í–æ–ø—Ä–æ—Å—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è {profession_id}: {questions_result['stats']['total_questions']} –≤–æ–ø—Ä–æ—Å–æ–≤")
            
            return JSONResponse({
                "success": True,
                "questions_count": questions_result["stats"]["total_questions"],
                "stats": questions_result["stats"],
                "message": "–í–æ–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!"
            })
        else:
            return JSONResponse({"error": f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {questions_result.get('error')}"}, status_code=500)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è {profession_id}: {e}")
        return JSONResponse({"error": str(e)}, status_code=500)



# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ì–ï–ù–ï–†–ê–¶–ò–ï–ô –í–û–ü–†–û–°–û–í ===

@app.get("/questions-management", response_class=HTMLResponse)
async def questions_management_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –≤–æ–ø—Ä–æ—Å–æ–≤ - —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∞"""
    user = request.session.get("user")
    if not user:
        return RedirectResponse(url="/login")
    
    # –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–æ–ø—Ä–æ—Å–∞–º–∏
    if user["role"] != "super_admin":
        return templates.TemplateResponse("access_denied.html", {
            "request": request,
            "user": user,
            "user_role_name": get_user_role_name(user["role"]),
            "message": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
            "allowed_roles": ["super_admin"]
        })
    
    return templates.TemplateResponse("questions_management.html", {
        "request": request,
        "user": user,
        "user_role_name": get_user_role_name(user["role"])
    })

@app.get("/api/questions-overview")
async def get_questions_overview(request: Request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–∑–æ—Ä–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏"""
    user = request.session.get("user")
    if not user:
        return JSONResponse({"error": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}, status_code=401)
    
    if user["role"] != "super_admin":
        return JSONResponse({"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"}, status_code=403)
    
    try:
        records_file = DATA_DIR / "profession_records.json"
        
        if not records_file.exists():
            return JSONResponse({
                "success": True,
                "ready": [],
                "pending": []
            })
        
        with open(records_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        ready_professions = []
        pending_professions = []
        
        for record in data.get("profession_records", []):
            profession_key = f"{record.get('real_name', '')} - {record.get('specialization', '–û–±—â–∞—è')}"
            
            profession_info = {
                "profession_key": profession_key,
                "profession": record.get('real_name', ''),
                "specialization": record.get('specialization', ''),
                "profession_id": record.get('id', ''),
                "updated_at": record.get('questions_generated_at', record.get('updated_at'))
            }
            
            if record.get("status") == "questions_generated" and record.get("questions"):
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
                questions = record.get("questions", [])
                breakdown = {"easy": 0, "medium": 0, "hard": 0}
                
                for question in questions:
                    difficulty = question.get("difficulty", "medium")
                    if difficulty in breakdown:
                        breakdown[difficulty] += 1
                
                profession_info.update({
                    "questions_count": len(questions),
                    "breakdown": breakdown
                })
                
                ready_professions.append(profession_info)
                
            elif record.get("status") == "approved_by_head":
                # –°—á–∏—Ç–∞–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–≥–æ–≤
                tags = record.get("tags", {})
                tags_count = len(tags)
                expected_questions = calculate_expected_questions_count(tags)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-3 —Ç–µ–≥–∞
                top_tags = []
                if tags:
                    sorted_tags = sorted(tags.items(), key=lambda x: x[1], reverse=True)
                    top_tags = [tag for tag, weight in sorted_tags[:3]]
                
                profession_info.update({
                    "expected_questions": f"~{expected_questions}",
                    "tags_count": tags_count,
                    "top_tags": top_tags,
                    "status": "pending"
                })
                
                pending_professions.append(profession_info)
        
        return JSONResponse({
            "success": True,
            "ready": ready_professions,
            "pending": pending_professions
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–∑–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        return JSONResponse({"error": str(e)}, status_code=500)

@app.delete("/api/questions/{profession_key}")
async def delete_questions_by_key(profession_key: str, request: Request):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏-—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    user = request.session.get("user")
    if not user:
        return JSONResponse({"error": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}, status_code=401)
    
    if user["role"] != "super_admin":
        return JSONResponse({"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"}, status_code=403)
    
    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∫–ª—é—á –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        profession_key = profession_key.replace("%20", " ")
        profession_name, specialization = parse_profession_key(profession_key)
        
        records_file = DATA_DIR / "profession_records.json"
        
        with open(records_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        found = False
        for record in data["profession_records"]:
            if (record.get("real_name") == profession_name and 
                record.get("specialization", "–û–±—â–∞—è") == specialization):
                
                # –û—á–∏—â–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å
                record["questions"] = []
                record["status"] = "approved_by_head"
                record.pop("questions_generated_at", None)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                record["workflow_history"].append({
                    "status": "questions_cleared",
                    "timestamp": datetime.now().isoformat() + "Z",
                    "user": user["email"],
                    "action": f"–í–æ–ø—Ä–æ—Å—ã —É–¥–∞–ª–µ–Ω—ã —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–æ–º"
                })
                
                found = True
                break
        
        if not found:
            return JSONResponse({"error": "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}, status_code=404)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        with open(records_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        logger.info(f"üóëÔ∏è –í–æ–ø—Ä–æ—Å—ã —É–¥–∞–ª–µ–Ω—ã –¥–ª—è {profession_key} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user['name']}")
        
        return JSONResponse({
            "success": True,
            "message": f"–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è '{profession_key}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã"
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        return JSONResponse({"error": str(e)}, status_code=500)

@app.post("/api/generate-single/{profession_key}")
async def generate_questions_for_single_profession(profession_key: str, request: Request):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–¥–Ω–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏-—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    user = request.session.get("user")
    if not user:
        return JSONResponse({"error": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}, status_code=401)
    
    if user["role"] != "super_admin":
        return JSONResponse({"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"}, status_code=403)
    
    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∫–ª—é—á –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        profession_key = profession_key.replace("%20", " ")
        profession_name, specialization = parse_profession_key(profession_key)
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
        records_file = DATA_DIR / "profession_records.json"
        
        with open(records_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        target_profession = None
        for record in data["profession_records"]:
            if (record.get("real_name") == profession_name and 
                record.get("specialization", "–û–±—â–∞—è") == specialization and
                record.get("status") == "approved_by_head"):
                target_profession = record
                break
        
        if not target_profession:
            return JSONResponse({"error": "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"}, status_code=404)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è"
        target_profession["status"] = "generating"
        target_profession["generation_started_at"] = datetime.now().isoformat() + "Z"
        target_profession["workflow_history"].append({
            "status": "generation_started",
            "timestamp": datetime.now().isoformat() + "Z",
            "user": user["email"],
            "action": f"–ó–∞–ø—É—â–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–æ–º"
        })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        with open(records_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
        import asyncio
        asyncio.create_task(generate_questions_background(target_profession, user))
        
        logger.info(f"ü§ñ –ó–∞–ø—É—â–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è {profession_key} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user['name']}")
        
        return JSONResponse({
            "success": True,
            "message": f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è '{profession_key}' –∑–∞–ø—É—â–µ–Ω–∞",
            "profession_id": target_profession["id"]
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return JSONResponse({"error": str(e)}, status_code=500)

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def calculate_expected_questions_count(tags: Dict[str, int]) -> int:
    """–†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–≥–æ–≤"""
    if not tags:
        return 0
    
    total_questions = 0
    for tag, weight in tags.items():
        if weight >= 85:
            total_questions += 50  # –ö—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–Ω—ã–π —Ç–µ–≥
        elif weight >= 70:
            total_questions += 40  # –í–∞–∂–Ω—ã–π —Ç–µ–≥
        elif weight >= 55:
            total_questions += 32  # –°—Ä–µ–¥–Ω–∏–π —Ç–µ–≥
        else:
            total_questions += 25  # –ù–∏–∑–∫–∏–π —Ç–µ–≥
    
    return total_questions

def parse_profession_key(profession_key: str) -> tuple:
    """–ü–∞—Ä—Å–∏–Ω–≥ –∫–ª—é—á–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ '–ù–∞–∑–≤–∞–Ω–∏–µ - –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è'"""
    if " - " in profession_key:
        parts = profession_key.split(" - ", 1)
        return parts[0], parts[1]
    else:
        return profession_key, "–û–±—â–∞—è"

async def generate_questions_background(profession: Dict[str, Any], user: Dict[str, Any]):
    """–§–æ–Ω–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"""
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã
        questions_result = await questions_generator.generate_questions_for_profession(profession)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –≤ —Ñ–∞–π–ª–µ
        records_file = DATA_DIR / "profession_records.json"
        
        with open(records_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
        for record in data["profession_records"]:
            if record["id"] == profession["id"]:
                if questions_result.get("success"):
                    record["questions"] = questions_result["questions"]
                    record["status"] = "questions_generated"
                    record["questions_generated_at"] = datetime.now().isoformat() + "Z"
                    record["workflow_history"].append({
                        "status": "questions_generated",
                        "timestamp": datetime.now().isoformat() + "Z",
                        "user": "system",
                        "action": f"–ò–ò —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª {questions_result['stats']['total_questions']} –≤–æ–ø—Ä–æ—Å–æ–≤"
                    })
                    
                    logger.info(f"‚úÖ –§–æ–Ω–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {record['real_name']}: {questions_result['stats']['total_questions']} –≤–æ–ø—Ä–æ—Å–æ–≤")
                else:
                    record["status"] = "approved_by_head"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                    record["workflow_history"].append({
                        "status": "generation_failed",
                        "timestamp": datetime.now().isoformat() + "Z",
                        "user": "system",
                        "action": f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {questions_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                    })
                    
                    logger.error(f"‚ùå –§–æ–Ω–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è {record['real_name']}: {questions_result.get('error')}")
                
                record.pop("generation_started_at", None)
                break
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with open(records_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞—Ç–Ω–æ
        try:
            records_file = DATA_DIR / "profession_records.json"
            with open(records_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            for record in data["profession_records"]:
                if record["id"] == profession["id"]:
                    record["status"] = "approved_by_head"
                    record.pop("generation_started_at", None)
                    break
            
            with open(records_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except:
            pass


# === WEBSOCKET –î–õ–Ø –ß–ê–¢–ê ===

@app.websocket("/ws/chat/{user_id}")
async def websocket_chat(websocket: WebSocket, user_id: str):
    """WebSocket –¥–ª—è —á–∞—Ç–∞ —Å –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∞–º–∏"""
    await websocket.accept()
    active_connections[user_id] = websocket
    
    try:
        await websocket.send_text(json.dumps({
            "type": "system",
            "message": "ü§ñ –ò–ò –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω! –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã."
        }))
        
        while True:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            data = await websocket.receive_text()
            message_data = json.loads(data)
            
            user_message = message_data.get("message", "")
            form_context = message_data.get("form_context", {})
            chat_type = message_data.get("chat_type", "hr_assistant")  # hr_assistant, head_approval
            
            # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω–æ–≥–æ –ò–ò –∞–≥–µ–Ω—Ç–∞
            if chat_type == "head_approval":
                ai_response = await head_approval.chat_with_head(user_message, form_context)
            else:
                ai_response = await hr_assistant.chat_with_user(user_message, form_context)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await websocket.send_text(json.dumps({
                "type": "ai_response",
                "message": ai_response.get("message", ""),
                "analysis": ai_response.get("analysis", {}),
                "suggestions": ai_response.get("suggestions", [])
            }))
            
    except WebSocketDisconnect:
        logger.info(f"üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω: {user_id}")
        if user_id in active_connections:
            del active_connections[user_id]
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

async def save_profession(profession_data: Dict[str, Any], user: Dict[str, Any], status: str) -> str:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
        records_file = DATA_DIR / "profession_records.json"
        
        if records_file.exists():
            with open(records_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
        else:
            data = {"profession_records": []}
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        profession_id = f"prof_{len(data['profession_records']) + 1:04d}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ –æ—Ç–¥–µ–ª–∞
        department_head = get_department_head_email(profession_data.get("department", ""))
        
        new_profession = {
            "id": profession_id,
            "bank_title": profession_data.get("bank_title", ""),
            "real_name": profession_data.get("real_name", ""),
            "specialization": profession_data.get("specialization", ""),
            "department": profession_data.get("department", ""),
            "department_head": department_head,
            "created_by": user["email"],
            "created_at": datetime.now().isoformat() + "Z",
            "status": status,
            "tags": {},
            "tags_versions": [],
            "questions": [],
            "workflow_history": [
                {
                    "status": status,
                    "timestamp": datetime.now().isoformat() + "Z",
                    "user": user["email"],
                    "action": "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ HR –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º"
                }
            ]
        }
        
        data["profession_records"].append(new_profession)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with open(records_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        return profession_id
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: {e}")
        raise

async def update_profession_with_tags(profession_id: str, tags_result: Dict[str, Any], user: Dict[str, Any]):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ —Å —Ç–µ–≥–∞–º–∏"""
    try:
        records_file = DATA_DIR / "profession_records.json"
        
        with open(records_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
        for profession in data["profession_records"]:
            if profession["id"] == profession_id:
                profession["tags"] = tags_result["tags"]
                profession["tags_versions"] = [tags_result["tags_version"]]
                profession["status"] = "tags_generated"
                profession["tags_generated_at"] = datetime.now().isoformat() + "Z"
                profession["workflow_history"].append({
                    "status": "tags_generated",
                    "timestamp": datetime.now().isoformat() + "Z",
                    "user": "system",
                    "action": f"–ò–ò —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª {len(tags_result['tags'])} —Ç–µ–≥–æ–≤"
                })
                break
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with open(records_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤: {e}")
        raise

def load_reference_data() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        data = {}
        
        reference_files = ['departments.json', 'professions.json', 'specializations.json', 'bank_titles.json']
        
        for filename in reference_files:
            file_path = DATA_DIR / filename
            if file_path.exists():
                with open(file_path, 'r', encoding='utf-8') as f:
                    key = filename.replace('.json', '')
                    data[key] = json.load(f).get(key, [])
        
        return data
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}

async def update_reference_files():
    """–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –∏–∑ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π"""
    try:
        records_file = DATA_DIR / "profession_records.json"
        
        if not records_file.exists():
            logger.info("üìÅ –§–∞–π–ª profession_records.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤")
            return
        
        with open(records_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∏–∑ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
        approved_records = [
            record for record in data.get("profession_records", [])
            if record.get("status") in ["approved_by_head", "questions_generated", "active"]
        ]
        
        if not approved_records:
            logger.info("üìä –ù–µ—Ç —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤")
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        departments = set()
        professions = set()
        specializations = set()
        bank_titles = set()
        all_tags = set()
        
        for record in approved_records:
            if record.get("department"):
                departments.add(record["department"])
            if record.get("real_name"):
                professions.add(record["real_name"])
            if record.get("specialization"):
                specializations.add(record["specialization"])
            if record.get("bank_title"):
                bank_titles.add(record["bank_title"])
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–≥–∏
            for tag in record.get("tags", {}):
                all_tags.add(tag)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
        reference_data = {
            "professions.json": {"professions": sorted(list(professions))},
            "specializations.json": {"specializations": sorted(list(specializations))},
            "bank_titles.json": {"bank_titles": sorted(list(bank_titles))},
            "tags.json": {"tags": sorted(list(all_tags))}
        }
        
        for filename, content in reference_data.items():
            file_path = DATA_DIR / filename
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(content, f, ensure_ascii=False, indent=2)
        
        logger.info(f"üìä –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {len(professions)} –ø—Ä–æ—Ñ–µ—Å—Å–∏–π, {len(bank_titles)} –Ω–∞–∑–≤–∞–Ω–∏–π, {len(all_tags)} —Ç–µ–≥–æ–≤")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤: {e}")

def get_department_head_email(department: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ email –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ –æ—Ç–¥–µ–ª–∞"""
    try:
        departments_file = DATA_DIR / "departments.json"
        
        if departments_file.exists():
            with open(departments_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                
            for dept in data.get("departments", []):
                if dept["name"] == department:
                    return dept.get("head_email", "unknown@halykbank.kz")
        
        return "unknown@halykbank.kz"
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ –æ—Ç–¥–µ–ª–∞: {e}")
        return "unknown@halykbank.kz"

async def notify_department_head(profession_data: Dict[str, Any], profession_id: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ –æ—Ç–¥–µ–ª–∞"""
    try:
        department_head = get_department_head_email(profession_data.get("department", ""))
        
        logger.info(f"üìß –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ù–ê–ß–ê–õ–¨–ù–ò–ö–£ –û–¢–î–ï–õ–ê: {department_head}")
        logger.info(f"üè¶ –ù–æ–≤–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
        logger.info(f"   ‚Ä¢ ID: {profession_id}")
        logger.info(f"   ‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {profession_data.get('bank_title')}")
        logger.info(f"   ‚Ä¢ –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è: {profession_data.get('real_name')}")
        logger.info(f"   ‚Ä¢ –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: {profession_data.get('department')}")
        logger.info(f"üîó –°—Å—ã–ª–∫–∞: http://localhost:{APP_PORT}/pending-approvals")
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ email
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞: {e}")
        return False

def get_pending_professions_for_user(user: Dict[str, Any]) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    try:
        records_file = DATA_DIR / "profession_records.json"
        
        if not records_file.exists():
            return []
        
        with open(records_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        pending = []
        for record in data.get("profession_records", []):
            if record.get("status") == "tags_generated":
                # –°—É–ø–µ—Ä –∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ
                if user["role"] == "super_admin":
                    pending.append(record)
                # –ù–∞—á–∞–ª—å–Ω–∏–∫ –æ—Ç–¥–µ–ª–∞ –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏
                elif (user["role"] == "head_admin" and 
                      record.get("department") == f"{user['department']} Department"):
                    pending.append(record)
        
        return pending
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π: {e}")
        return []

def get_profession_by_id(profession_id: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –ø–æ ID"""
    try:
        records_file = DATA_DIR / "profession_records.json"
        
        if not records_file.exists():
            return None
        
        with open(records_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        for record in data.get("profession_records", []):
            if record["id"] == profession_id:
                return record
        
        return None
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ {profession_id}: {e}")
        return None

async def approve_profession_by_head(profession_id: str, corrected_tags: Dict[str, int], user: Dict[str, Any], comment: str):
    """–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–º –æ—Ç–¥–µ–ª–∞"""
    try:
        records_file = DATA_DIR / "profession_records.json"
        
        with open(records_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        for record in data["profession_records"]:
            if record["id"] == profession_id:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é —Ç–µ–≥–æ–≤
                new_version = {
                    "version": len(record.get("tags_versions", [])) + 1,
                    "created_by": user["email"],
                    "timestamp": datetime.now().isoformat() + "Z",
                    "action": "–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–º –æ—Ç–¥–µ–ª–∞",
                    "tags": corrected_tags.copy(),
                    "total_tags": len(corrected_tags),
                    "comment": comment,
                    "changes": calculate_tags_changes(record.get("tags", {}), corrected_tags)
                }
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
                record["tags"] = corrected_tags
                record["tags_versions"].append(new_version)
                record["status"] = "approved_by_head"
                record["approved_at"] = datetime.now().isoformat() + "Z"
                record["approved_by"] = user["email"]
                record["approval_comment"] = comment
                record["workflow_history"].append({
                    "status": "approved_by_head",
                    "timestamp": datetime.now().isoformat() + "Z",
                    "user": user["email"],
                    "action": f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —Å {len(corrected_tags)} —Ç–µ–≥–∞–º–∏"
                })
                break
        
        with open(records_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
        await update_reference_files()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: {e}")
        raise

def calculate_tags_changes(old_tags: Dict[str, int], new_tags: Dict[str, int]) -> Dict[str, Any]:
    """–†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ç–µ–≥–∞—Ö"""
    changes = {
        "added": [],
        "removed": [],
        "modified": {},
        "unchanged": []
    }
    
    # –ù–∞–π–¥–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏
    for tag in new_tags:
        if tag not in old_tags:
            changes["added"].append(tag)
    
    # –ù–∞–π–¥–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏
    for tag in old_tags:
        if tag not in new_tags:
            changes["removed"].append(tag)
    
    # –ù–∞–π–¥–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –∏ –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏
    for tag in old_tags:
        if tag in new_tags:
            if old_tags[tag] != new_tags[tag]:
                changes["modified"][tag] = {
                    "from": old_tags[tag],
                    "to": new_tags[tag]
                }
            else:
                changes["unchanged"].append(tag)
    
    return changes

async def return_profession_to_hr(profession_id: str, return_reason: str, return_comment: str, user: Dict[str, Any]):
    """–í–æ–∑–≤—Ä–∞—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É HR"""
    try:
        records_file = DATA_DIR / "profession_records.json"
        
        with open(records_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        for record in data["profession_records"]:
            if record["id"] == profession_id:
                record["status"] = "returned_to_hr"
                record["returned_at"] = datetime.now().isoformat() + "Z"
                record["returned_by"] = user["email"]
                record["return_reason"] = return_reason
                record["return_comment"] = return_comment
                record["workflow_history"].append({
                    "status": "returned_to_hr",
                    "timestamp": datetime.now().isoformat() + "Z",
                    "user": user["email"],
                    "action": f"–í–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É: {return_reason}"
                })
                break
        
        with open(records_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º HR
        await notify_hr_about_return(profession_id, return_reason, return_comment)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: {e}")
        raise

async def notify_hr_about_return(profession_id: str, return_reason: str, return_comment: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ HR –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"""
    logger.info(f"üìß –£–í–ï–î–û–ú–õ–ï–ù–ò–ï HR –û –í–û–ó–í–†–ê–¢–ï: {profession_id}")
    logger.info(f"   ‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: {return_reason}")
    logger.info(f"   ‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {return_comment}")
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ email

async def save_profession_questions(profession_id: str, questions: List[Dict[str, Any]]):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"""
    try:
        records_file = DATA_DIR / "profession_records.json"
        
        with open(records_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        for record in data["profession_records"]:
            if record["id"] == profession_id:
                record["questions"] = questions
                record["questions_generated_at"] = datetime.now().isoformat() + "Z"
                record["workflow_history"].append({
                    "status": "questions_generated",
                    "timestamp": datetime.now().isoformat() + "Z",
                    "user": "system",
                    "action": f"–ò–ò —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤"
                })
                break
        
        with open(records_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        raise

async def update_profession_status(profession_id: str, status: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"""
    try:
        records_file = DATA_DIR / "profession_records.json"
        
        with open(records_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        for record in data["profession_records"]:
            if record["id"] == profession_id:
                record["status"] = status
                record["status_updated_at"] = datetime.now().isoformat() + "Z"
                break
        
        with open(records_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        raise

def get_all_questions() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
    try:
        records_file = DATA_DIR / "profession_records.json"
        
        if not records_file.exists():
            return {"questions": [], "stats": {}}
        
        with open(records_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        all_questions = []
        stats = {"total_questions": 0, "questions_by_difficulty": {"easy": 0, "medium": 0, "hard": 0}}
        
        for record in data.get("profession_records", []):
            if record.get("questions"):
                for question in record["questions"]:
                    question["profession_id"] = record["id"]
                    question["profession_title"] = record["bank_title"]
                    all_questions.append(question)
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    stats["total_questions"] += 1
                    difficulty = question.get("difficulty", "medium")
                    if difficulty in stats["questions_by_difficulty"]:
                        stats["questions_by_difficulty"][difficulty] += 1
        
        return {"questions": all_questions, "stats": stats}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        return {"questions": [], "stats": {}}

async def get_user_statistics(user: Dict[str, Any]) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        records_file = DATA_DIR / "profession_records.json"
        
        if not records_file.exists():
            return {}
        
        with open(records_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        stats = {
            "total_professions": 0,
            "created_by_user": 0,
            "pending_approval": 0,
            "approved": 0,
            "questions_generated": 0
        }
        
        for record in data.get("profession_records", []):
            stats["total_professions"] += 1
            
            if record.get("created_by") == user["email"]:
                stats["created_by_user"] += 1
            
            status = record.get("status", "")
            if status == "tags_generated":
                stats["pending_approval"] += 1
            elif status == "approved_by_head":
                stats["approved"] += 1
            elif status == "questions_generated":
                stats["questions_generated"] += 1
        
        return stats
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {}

# === –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ó–ê–î–ê–ß ===

async def daily_questions_generation():
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ 00:00"""
    try:
        logger.info("üåô –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤")
        
        records_file = DATA_DIR / "profession_records.json"
        
        if not records_file.exists():
            logger.info("üìÅ –ù–µ—Ç —Ñ–∞–π–ª–∞ profession_records.json")
            return
        
        with open(records_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "approved_by_head"
        approved_professions = [
            record for record in data.get("profession_records", [])
            if record.get("status") == "approved_by_head"
        ]
        
        if not approved_professions:
            logger.info("üìä –ù–µ—Ç —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤")
            return
        
        generated_count = 0
        
        for profession in approved_professions:
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã
                questions_result = await questions_generator.generate_questions_for_profession(profession)
                
                if questions_result.get("success"):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
                    await save_profession_questions(profession["id"], questions_result["questions"])
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    await update_profession_status(profession["id"], "questions_generated")
                    
                    generated_count += 1
                    logger.info(f"‚úÖ –í–æ–ø—Ä–æ—Å—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è {profession['id']}: {questions_result['stats']['total_questions']} –≤–æ–ø—Ä–æ—Å–æ–≤")
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è {profession['id']}")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è {profession['id']}: {e}")
        
        logger.info(f"üåô –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {generated_count} –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        
        
        
# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ï–°–¢-–°–ï–°–°–ò–Ø–ú–ò –ö–ê–ù–î–ò–î–ê–¢–û–í ===
# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ endpoints –≤ –≤–∞—à main.py

import uuid
import random
from collections import Counter

@app.get("/create-candidate-test", response_class=HTMLResponse)
async def create_candidate_test_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
    user = request.session.get("user")
    if not user:
        return RedirectResponse(url="/login")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (–º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ—Å—Ç—ã —Ç–µ, –∫—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏)
    if not (can_user_view_questions(user["role"]) or can_user_create_profession(user["role"])):
        return templates.TemplateResponse("access_denied.html", {
            "request": request,
            "user": user,
            "user_role_name": get_user_role_name(user["role"]),
            "message": "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤",
            "allowed_roles": ["super_admin", "hr_head_admin"]
        })
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
    available_professions = get_professions_with_questions()
    
    return templates.TemplateResponse("create_candidate_test.html", {
        "request": request,
        "user": user,
        "user_role_name": get_user_role_name(user["role"]),
        "professions": available_professions,
        "total_professions": len(available_professions)
    })

@app.get("/manage-test-sessions", response_class=HTMLResponse)
async def manage_test_sessions_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏—è–º–∏ - —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∞"""
    user = request.session.get("user")
    if not user:
        return RedirectResponse(url="/login")
    
    # –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏—è–º–∏
    if not can_user_view_questions(user["role"]):
        return templates.TemplateResponse("access_denied.html", {
            "request": request,
            "user": user,
            "user_role_name": get_user_role_name(user["role"]),
            "message": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏—è–º–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
            "allowed_roles": ["super_admin"]
        })
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏–∏
    all_test_sessions = get_all_test_sessions()
    
    return templates.TemplateResponse("manage_test_sessions.html", {
        "request": request,
        "user": user,
        "user_role_name": get_user_role_name(user["role"]),
        "test_sessions": all_test_sessions["test_sessions"],
        "stats": all_test_sessions["stats"],
        "total_sessions": len(all_test_sessions["test_sessions"])
    })

@app.get("/api/professions-with-questions")
async def get_professions_with_questions(request: Request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π —Å –≥–æ—Ç–æ–≤—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤"""
    user = request.session.get("user")
    if not user:
        return JSONResponse({"error": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}, status_code=401)
    
    try:
        professions = get_professions_with_questions()
        return JSONResponse({
            "success": True,
            "professions": professions,
            "total": len(professions)
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏: {e}")
        return JSONResponse({"error": str(e)}, status_code=500)

@app.get("/api/profession-questions-preview/{profession_id}")
async def get_profession_questions_preview(profession_id: str, request: Request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º"""
    user = request.session.get("user")
    if not user:
        return JSONResponse({"error": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}, status_code=401)
    
    try:
        profession = get_profession_by_id(profession_id)
        if not profession:
            return JSONResponse({"error": "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}, status_code=404)
        
        questions = profession.get("questions", [])
        if not questions:
            return JSONResponse({"error": "–£ —ç—Ç–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤"}, status_code=404)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        questions_by_difficulty = {"easy": [], "medium": [], "hard": []}
        tags_stats = {}
        
        for question in questions:
            difficulty = question.get("difficulty", "medium")
            tag = question.get("tag", "General")
            
            if difficulty in questions_by_difficulty:
                questions_by_difficulty[difficulty].append(question)
            
            if tag not in tags_stats:
                tags_stats[tag] = 0
            tags_stats[tag] += 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º
        levels_stats = {
            "junior": {"available": len(questions_by_difficulty["easy"]), "difficulty": "easy"},
            "middle": {"available": len(questions_by_difficulty["medium"]), "difficulty": "medium"},
            "senior": {"available": len(questions_by_difficulty["hard"]), "difficulty": "hard"}
        }
        
        return JSONResponse({
            "success": True,
            "profession": {
                "id": profession["id"],
                "name": profession["real_name"],
                "specialization": profession.get("specialization", "–û–±—â–∞—è"),
                "bank_title": profession["bank_title"]
            },
            "tags": profession.get("tags", {}),
            "levels_stats": levels_stats,
            "tags_stats": tags_stats,
            "total_questions": len(questions)
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        return JSONResponse({"error": str(e)}, status_code=500)

@app.post("/api/create-candidate-test")
async def create_candidate_test(request: Request, test_data: dict):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
    user = request.session.get("user")
    if not user:
        return JSONResponse({"error": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}, status_code=401)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if not (can_user_view_questions(user["role"]) or can_user_create_profession(user["role"])):
        return JSONResponse({"error": "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤"}, status_code=403)
    
    try:
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        candidate_name = test_data.get("candidate_name", "").strip()
        candidate_iin = test_data.get("candidate_iin", "").strip()
        candidate_phone = test_data.get("candidate_phone", "").strip()
        candidate_email = test_data.get("candidate_email", "").strip()
        profession_id = test_data.get("profession_id")
        level = test_data.get("level")  # junior/middle/senior
        
        if not candidate_name:
            return JSONResponse({"error": "–§–ò–û –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"}, status_code=400)
        
        if not profession_id or not level:
            return JSONResponse({"error": "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏ —É—Ä–æ–≤–µ–Ω—å"}, status_code=400)
        
        if level not in ["junior", "middle", "senior"]:
            return JSONResponse({"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å"}, status_code=400)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
        profession = get_profession_by_id(profession_id)
        if not profession or not profession.get("questions"):
            return JSONResponse({"error": "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –Ω–µ—ë –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤"}, status_code=404)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏—é
        test_session = await create_test_session(test_data, profession, user)
        
        logger.info(f"üë§ –¢–µ—Å—Ç-—Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {candidate_name} (ID: {test_session['test_session_id']}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user['name']}")
        
        return JSONResponse({
            "success": True,
            "test_session_id": test_session["test_session_id"],
            "test_url": test_session["test_url"],
            "candidate_name": candidate_name,
            "questions_count": len(test_session["questions"]),
            "level": level,
            "message": f"–¢–µ—Å—Ç –¥–ª—è {candidate_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!"
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏–∏: {e}")
        return JSONResponse({"error": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞: {str(e)}"}, status_code=500)

@app.get("/api/test-sessions-overview")
async def get_test_sessions_overview(request: Request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–∑–æ—Ä–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏–π"""
    user = request.session.get("user")
    if not user:
        return JSONResponse({"error": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}, status_code=401)
    
    if not can_user_view_questions(user["role"]):
        return JSONResponse({"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"}, status_code=403)
    
    try:
        all_test_sessions = get_all_test_sessions()
        return JSONResponse({
            "success": True,
            "test_sessions": all_test_sessions["test_sessions"],
            "stats": all_test_sessions["stats"]
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–∑–æ—Ä–∞ —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏–π: {e}")
        return JSONResponse({"error": str(e)}, status_code=500)

@app.get("/api/test-session/{session_id}")
async def get_test_session_details(session_id: str, request: Request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏–∏"""
    user = request.session.get("user")
    if not user:
        return JSONResponse({"error": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}, status_code=401)
    
    try:
        test_session = get_test_session_by_id(session_id)
        if not test_session:
            return JSONResponse({"error": "–¢–µ—Å—Ç-—Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}, status_code=404)
        
        return JSONResponse({
            "success": True,
            "test_session": test_session
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏–∏ {session_id}: {e}")
        return JSONResponse({"error": str(e)}, status_code=500)

@app.delete("/api/test-session/{session_id}")
async def delete_test_session(session_id: str, request: Request):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏–∏ - —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∞"""
    user = request.session.get("user")
    if not user:
        return JSONResponse({"error": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}, status_code=401)
    
    # –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏–∏
    if user["role"] != "super_admin":
        return JSONResponse({"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"}, status_code=403)
    
    try:
        success = await delete_test_session_by_id(session_id)
        
        if success:
            logger.info(f"üóëÔ∏è –¢–µ—Å—Ç-—Å–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞: {session_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user['name']}")
            return JSONResponse({
                "success": True,
                "message": "–¢–µ—Å—Ç-—Å–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"
            })
        else:
            return JSONResponse({"error": "–¢–µ—Å—Ç-—Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}, status_code=404)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏–∏ {session_id}: {e}")
        return JSONResponse({"error": str(e)}, status_code=500)
    
    
@app.post("/api/submit-test")
async def submit_test_results(request: Request):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º"""
    try:
        data = await request.json()
        session_id = data.get('session_id')
        answers = data.get('answers', [])
        time_spent = data.get('time_spent', 0)
        completed_at = data.get('completed_at')
        security_stats = data.get('security_stats', {})
        
        if not session_id:
            return {"status": "error", "message": "session_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"}
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏–π
        sessions_file = DATA_DIR / "test_sessions.json"
        
        if not sessions_file.exists():
            return {"status": "error", "message": "–§–∞–π–ª —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        with open(sessions_file, 'r', encoding='utf-8') as f:
            sessions_data = json.load(f)
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—É—é —Å–µ—Å—Å–∏—é
        session_found = False
        for session in sessions_data.get("test_sessions", []):
            if session["test_session_id"] == session_id:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                results = calculate_test_results(session["questions"], answers)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ò–ò
                recommendations = await generate_candidate_recommendations(session, results)
                results["recommendations"] = recommendations
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
                session["answers"] = answers
                session["time_spent"] = time_spent
                session["completed_at"] = completed_at
                session["status"] = "completed"
                session["started_at"] = session.get("started_at") or completed_at
                session["results"] = results
                session["security_stats"] = security_stats
                
                session_found = True
                break
        
        if not session_found:
            return {"status": "error", "message": "–¢–µ—Å—Ç-—Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        with open(sessions_file, 'w', encoding='utf-8') as f:
            json.dump(sessions_data, f, ensure_ascii=False, indent=2)
        
        return {
            "status": "success", 
            "message": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
            "results": results
        }
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        return {"status": "error", "message": str(e)}


def calculate_test_results(questions: list, answers: list) -> dict:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –æ—Ü–µ–Ω–∫–æ–π –∏ –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    if not questions or not answers:
        return {
            "correct_answers": 0,
            "total_questions": len(questions) if questions else 0,
            "answered_questions": 0,
            "percentage": 0.0,
            "grade": "F",
            "grade_text": "–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ",
            "category_breakdown": {}
        }
    
    correct_answers = 0
    answered_questions = 0
    category_stats = {}
    
    for i, question in enumerate(questions):
        category = question.get("category", "General")
        difficulty = question.get("difficulty", "medium")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category not in category_stats:
            category_stats[category] = {
                "total": 0,
                "correct": 0,
                "answered": 0,
                "questions": []
            }
        
        category_stats[category]["total"] += 1
        
        if i < len(answers) and answers[i] is not None:
            answered_questions += 1
            category_stats[category]["answered"] += 1
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç)
            correct_answer_text = question.get("correct_answer", "")
            options = question.get("options", [])
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ options
            correct_index = -1
            for idx, option in enumerate(options):
                if option == correct_answer_text:
                    correct_index = idx
                    break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            is_correct = correct_index != -1 and answers[i] == correct_index
            if is_correct:
                correct_answers += 1
                category_stats[category]["correct"] += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            category_stats[category]["questions"].append({
                "question": question.get("question", ""),
                "difficulty": difficulty,
                "tag": question.get("tag", ""),
                "is_correct": is_correct,
                "user_answer": options[answers[i]] if 0 <= answers[i] < len(options) else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞",
                "correct_answer": correct_answer_text
            })
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏ –æ—Ü–µ–Ω–∫—É
    percentage = (correct_answers / answered_questions * 100) if answered_questions > 0 else 0.0
    grade_info = calculate_grade(percentage)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞–∑–±–∏–≤–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    category_breakdown = {}
    for category, stats in category_stats.items():
        if stats["answered"] > 0:
            cat_percentage = (stats["correct"] / stats["answered"]) * 100
            category_breakdown[category] = {
                "correct": stats["correct"],
                "total": stats["answered"],
                "percentage": round(cat_percentage, 1),
                "grade": calculate_grade(cat_percentage)["grade"]
            }
    
    return {
        "correct_answers": correct_answers,
        "total_questions": len(questions),
        "answered_questions": answered_questions,
        "percentage": round(percentage, 1),
        "grade": grade_info["grade"],
        "grade_text": grade_info["text"],
        "grade_color": grade_info["color"],
        "category_breakdown": category_breakdown,
        "detailed_stats": category_stats  # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    }


def calculate_grade(percentage: float) -> dict:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
    if percentage >= 85:
        return {"grade": "A", "text": "–û—Ç–ª–∏—á–Ω–æ", "color": "#1DB584"}
    elif percentage >= 70:
        return {"grade": "B", "text": "–•–æ—Ä–æ—à–æ", "color": "#059669"}
    elif percentage >= 50:
        return {"grade": "C", "text": "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ", "color": "#F59E0B"}
    elif percentage >= 30:
        return {"grade": "D", "text": "–°–ª–∞–±–æ", "color": "#F97316"}
    else:
        return {"grade": "F", "text": "–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ", "color": "#EF4444"}


async def generate_candidate_recommendations(test_session: dict, results: dict) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —á–µ—Ä–µ–∑ –ò–ò"""
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ò–ò
        candidate = test_session.get("candidate", {})
        profession = test_session.get("profession", {})
        level = test_session.get("level", "")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞
        weak_categories = []
        strong_categories = []
        
        for category, breakdown in results.get("category_breakdown", {}).items():
            if breakdown["percentage"] < 70:
                weak_categories.append(f"{category} ({breakdown['percentage']}%)")
            elif breakdown["percentage"] >= 85:
                strong_categories.append(f"{category} ({breakdown['percentage']}%)")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò
        prompt = f"""
–°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

–î–ê–ù–ù–´–ï –ö–ê–ù–î–ò–î–ê–¢–ê:
- –§–ò–û: {candidate.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
- –î–æ–ª–∂–Ω–æ—Å—Ç—å: {profession.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} ({profession.get('specialization', '')})
- –£—Ä–æ–≤–µ–Ω—å: {level.capitalize()}

–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
- –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {results.get('percentage', 0)}% (–û—Ü–µ–Ω–∫–∞: {results.get('grade', 'F')})
- –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {results.get('correct_answers', 0)}/{results.get('answered_questions', 0)}

–°–ò–õ–¨–ù–´–ï –°–¢–û–†–û–ù–´: {', '.join(strong_categories) if strong_categories else '–ù–µ –≤—ã—è–≤–ª–µ–Ω—ã'}
–°–õ–ê–ë–´–ï –û–ë–õ–ê–°–¢–ò: {', '.join(weak_categories) if weak_categories else '–ù–µ –≤—ã—è–≤–ª–µ–Ω—ã'}

–ó–ê–î–ê–ß–ê:
–°–æ–∑–¥–∞–π –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (–º–∞–∫—Å–∏–º—É–º 200 —Å–ª–æ–≤).

–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:
1. –ö—Ä–∞—Ç–∫–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
2. –ß—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Ö–æ—Ä–æ—à–æ (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã)
3. –ß—Ç–æ —Å—Ç–æ–∏—Ç —É–ª—É—á—à–∏—Ç—å (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏)
4. 2-3 –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è

–¢–û–ù: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π
"""

        # –í—ã–∑—ã–≤–∞–µ–º –ò–ò (–∏—Å–ø–æ–ª—å–∑—É–µ–º OpenAI API –∫–∞–∫ –≤ –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–∞—Ö)
        import openai
        openai.api_key = OPENAI_API_KEY
        
        response = openai.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=300,
            temperature=0.7
        )
        
        recommendations = response.choices[0].message.content.strip()
        logger.info(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è {candidate.get('full_name', '–∫–∞–Ω–¥–∏–¥–∞—Ç–∞')}")
        
        return recommendations
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        
        # Fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–∫–∏
        grade = results.get("grade", "F")
        percentage = results.get("percentage", 0)
        
        fallback_recommendations = {
            "A": f"–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã –ø–æ–∫–∞–∑–∞–ª–∏ –æ—Ç–ª–∏—á–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ {profession.get('name', '–≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏')}. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∏ –¥–µ–ª–∏—Ç–µ—Å—å –∑–Ω–∞–Ω–∏—è–º–∏ —Å –∫–æ–ª–ª–µ–≥–∞–º–∏.",
            
            "B": f"–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –£ –≤–∞—Å –µ—Å—Ç—å solid –ø–æ–Ω–∏–º–∞–Ω–∏–µ –æ—Å–Ω–æ–≤ {profession.get('name', '—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏')}. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–≥–ª—É–±–∏—Ç—å –∑–Ω–∞–Ω–∏—è –≤ —Å–ª–∞–±—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö –∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤.",
            
            "C": f"–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —Ä–æ—Å—Ç–∞. –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –∏–∑—É—á–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ.",
            
            "D": f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–π—Ç–∏ –±–∞–∑–æ–≤—ã–µ –∫—É—Ä—Å—ã –ø–æ {profession.get('name', '—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏')} –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç.",
            
            "F": f"–†–µ–∑—É–ª—å—Ç–∞—Ç —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ –∑–Ω–∞–Ω–∏—è—Ö. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞—á–∞—Ç—å —Å –∏–∑—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤ {profession.get('name', '—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏')} —á–µ—Ä–µ–∑ –∫—É—Ä—Å—ã –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è."
        }
        
        return fallback_recommendations.get(grade, "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –∏ –∑–Ω–∞–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏.")
    
    
@app.get("/api/test-session-answers/{session_id}")
async def get_test_session_answers(session_id: str, request: Request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
    user = request.session.get("user")
    if not user:
        return JSONResponse({"error": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}, status_code=401)
    
    if not can_user_view_questions(user["role"]):
        return JSONResponse({"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"}, status_code=403)
    
    try:
        test_session = get_test_session_by_id(session_id)
        if not test_session:
            return JSONResponse({"error": "–¢–µ—Å—Ç-—Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}, status_code=404)
        
        if test_session.get("status") != "completed":
            return JSONResponse({"error": "–¢–µ—Å—Ç –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω"}, status_code=400)
        
        questions = test_session.get("questions", [])
        answers = test_session.get("answers", [])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç–∞—Ö
        answers_details = []
        
        for i, question in enumerate(questions):
            options = question.get("options", [])
            correct_answer_text = question.get("correct_answer", "")
            
            # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_answer_index = answers[i] if i < len(answers) and answers[i] is not None else None
            user_answer_text = options[user_answer_index] if user_answer_index is not None and 0 <= user_answer_index < len(options) else None
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            correct_index = -1
            for idx, option in enumerate(options):
                if option == correct_answer_text:
                    correct_index = idx
                    break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
            is_correct = user_answer_index is not None and user_answer_index == correct_index
            
            answers_details.append({
                "question": question.get("question", ""),
                "options": options,
                "user_answer": user_answer_text,
                "correct_answer": correct_answer_text,
                "is_correct": is_correct,
                "difficulty": question.get("difficulty", "medium"),
                "category": question.get("category", "General")
            })
        
        return JSONResponse({
            "success": True,
            "test_session": test_session,
            "answers_details": answers_details
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ {session_id}: {e}")
        return JSONResponse({"error": str(e)}, status_code=500)

# === –°–¢–†–ê–ù–ò–¶–ê –ü–†–û–•–û–ñ–î–ï–ù–ò–Ø –¢–ï–°–¢–ê ===

@app.get("/take-test/{session_id}", response_class=HTMLResponse)
async def take_test_page(session_id: str, request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º"""
    try:
        test_session = get_test_session_by_id(session_id)
        if not test_session:
            return templates.TemplateResponse("test_not_found.html", {
                "request": request,
                "session_id": session_id
            })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏–∏
        if test_session.get("status") == "completed":
            return templates.TemplateResponse("test_completed.html", {
                "request": request,
                "test_session": test_session
            })
        
        return templates.TemplateResponse("take_test.html", {
            "request": request,
            "test_session": test_session,
            "candidate": test_session.get("candidate", {}),
            "profession": test_session.get("profession", {}),
            "questions": test_session.get("questions", []),
            "total_questions": len(test_session.get("questions", []))
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–∞ {session_id}: {e}")
        return templates.TemplateResponse("test_error.html", {
            "request": request,
            "error": str(e)
        })

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def get_professions_with_questions() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π —Å –≥–æ—Ç–æ–≤—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏"""
    try:
        records_file = DATA_DIR / "profession_records.json"
        
        if not records_file.exists():
            return []
        
        with open(records_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        professions_with_questions = []
        
        for record in data.get("profession_records", []):
            if (record.get("status") == "questions_generated" and 
                record.get("questions") and len(record["questions"]) > 0):
                
                questions = record["questions"]
                questions_by_difficulty = {"easy": 0, "medium": 0, "hard": 0}
                
                for question in questions:
                    difficulty = question.get("difficulty", "medium")
                    if difficulty in questions_by_difficulty:
                        questions_by_difficulty[difficulty] += 1
                
                professions_with_questions.append({
                    "id": record["id"],
                    "name": record["real_name"],
                    "specialization": record.get("specialization", "–û–±—â–∞—è"),
                    "bank_title": record["bank_title"],
                    "department": record.get("department", ""),
                    "questions_count": len(questions),
                    "questions_by_difficulty": questions_by_difficulty,
                    "tags": record.get("tags", {}),
                    "updated_at": record.get("questions_generated_at")
                })
        
        return professions_with_questions
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏: {e}")
        return []

async def create_test_session(test_data: Dict[str, Any], profession: Dict[str, Any], user: Dict[str, Any]) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏–∏
        sessions_file = DATA_DIR / "test_sessions.json"
        
        if sessions_file.exists():
            with open(sessions_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
        else:
            data = {"test_sessions": []}
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏
        session_id = str(uuid.uuid4())
        
        # –û—Ç–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞ –ø–æ —É—Ä–æ–≤–Ω—é –∏ —Ç–µ–≥–∞–º
        selected_questions = select_questions_by_level_and_tags(
            profession, 
            test_data["level"]
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏—é
        test_session = {
            "test_session_id": session_id,
            "candidate": {
                "full_name": test_data.get("candidate_name", ""),
                "iin": test_data.get("candidate_iin", ""),
                "phone": test_data.get("candidate_phone", ""),
                "email": test_data.get("candidate_email", "")
            },
            "profession": {
                "id": profession["id"],
                "name": profession["real_name"],
                "specialization": profession.get("specialization", "–û–±—â–∞—è"),
                "bank_title": profession["bank_title"]
            },
            "level": test_data["level"],
            "questions": selected_questions,
            "questions_count": len(selected_questions),
            "test_url": f"http://localhost:8002/take-test/{session_id}",
            "created_by": user["email"],
            "created_at": datetime.now().isoformat() + "Z",
            "status": "pending",  # pending/in_progress/completed
            "started_at": None,
            "completed_at": None,
            "results": None,
            "answers": []
        }
        
        data["test_sessions"].append(test_session)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with open(sessions_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        return test_session
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏–∏: {e}")
        raise

def select_questions_by_level_and_tags(profession: Dict[str, Any], level: str, total_questions: int = 15) -> List[Dict[str, Any]]:
    """–û—Ç–±–æ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é –∏ –≤–µ—Å–∞–º —Ç–µ–≥–æ–≤"""
    try:
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –í—ã–±–æ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è {profession.get('real_name')} —É—Ä–æ–≤–Ω—è {level}")
        
        # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ —É—Ä–æ–≤–Ω—é
        difficulty_map = {
            "junior": "easy",
            "middle": "medium",
            "senior": "hard"
        }
        target_difficulty = difficulty_map.get(level, "medium")
        
        # 2. –§–∏–ª—å—Ç—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        all_questions = profession.get("questions", [])
        questions_by_difficulty = [q for q in all_questions 
                                 if q.get("difficulty") == target_difficulty]
        
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω–æ {len(questions_by_difficulty)} –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ {target_difficulty}")
        
        if len(questions_by_difficulty) < total_questions:
            logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —É—Ä–æ–≤–Ω—è {target_difficulty}: {len(questions_by_difficulty)} –∏–∑ {total_questions}")
            # –ë–µ—Ä–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —ç—Ç–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            selected_questions = questions_by_difficulty.copy()
        else:
            # 3. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–µ–≥–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–æ–≤
            tags_weights = profession.get("tags", {})
            if not tags_weights:
                # –ï—Å–ª–∏ –Ω–µ—Ç –≤–µ—Å–æ–≤, –±–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                selected_questions = random.sample(questions_by_difficulty, total_questions)
                print(f"üîç –û–¢–õ–ê–î–ö–ê: –í—ã–±—Ä–∞–Ω–æ —Å–ª—É—á–∞–π–Ω–æ (–±–µ–∑ —Ç–µ–≥–æ–≤)")
            else:
                selected_questions = distribute_questions_by_tags(
                    questions_by_difficulty, 
                    tags_weights, 
                    total_questions
                )
        
        # 4. –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
        random.shuffle(selected_questions)
        
        # 5. –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–µ–µ (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–æ–ª—É—á–∏–ª–æ—Å—å –±–æ–ª—å—à–µ)
        final_questions = selected_questions[:total_questions]
        
        # –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –í—ã–±—Ä–∞–Ω–æ {len(final_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
        question_ids = [q.get('id', 'no-id') for q in final_questions]
        unique_ids = set(question_ids)
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID: {len(unique_ids)}")
        
        if len(question_ids) != len(unique_ids):
            print(f"üö® –î–£–ë–õ–ò–ö–ê–¢–´ –ù–ê–ô–î–ï–ù–´!")
            duplicates = [qid for qid in question_ids if question_ids.count(qid) > 1]
            print(f"üö® –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è ID: {set(duplicates)}")
        
        return final_questions
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        return []

def distribute_questions_by_tags(questions: List[Dict[str, Any]], tags_weights: Dict[str, int], total_questions: int) -> List[Dict[str, Any]]:
    """–£–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–≥–∞–º —Å –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–µ–π –∏—Å–∫–∞–∂–µ–Ω–∏–π –ø—Ä–æ–ø–æ—Ä—Ü–∏–π"""
    try:
        print(f"üß† –£–ú–ù–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï: {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ {total_questions} –º–µ—Å—Ç")
        
        # 1. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–≥–∞–º
        questions_by_tag = {}
        for question in questions:
            tag = question.get("tag", "General")
            if tag not in questions_by_tag:
                questions_by_tag[tag] = []
            questions_by_tag[tag].append(question)
        
        # 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–¥–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ (float)
        total_weight = sum(tags_weights.values())
        ideal_counts = {}
        for tag, weight in tags_weights.items():
            if tag in questions_by_tag:
                ideal_count = (weight / total_weight) * total_questions
                ideal_counts[tag] = ideal_count
                print(f"üìä {tag}: –∏–¥–µ–∞–ª—å–Ω–æ {ideal_count:.2f}")
        
        # 3. –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
        tag_counts = {tag: round(ideal) for tag, ideal in ideal_counts.items()}
        print(f"üîÑ –ü–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è: {tag_counts} (—Å—É–º–º–∞: {sum(tag_counts.values())})")
        
        # 4. –£–ú–ù–ê–Ø –ö–û–†–†–ï–ö–¶–ò–Ø –ø–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º –æ—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        while sum(tag_counts.values()) != total_questions:
            current_sum = sum(tag_counts.values())
            
            # –°—á–∏—Ç–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ - –∏–¥–µ–∞–ª—å–Ω–æ–µ)  
            differences = {tag: tag_counts[tag] - ideal_counts[tag] 
                          for tag in tag_counts}
            
            if current_sum > total_questions:
                # –ù—É–∂–Ω–æ —É–±—Ä–∞—Ç—å: –∏—â–µ–º —Ç–µ–≥ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –ø–µ—Ä–µ–±–æ—Ä–æ–º
                tag_to_reduce = max(differences.keys(), key=lambda x: differences[x])
                if tag_counts[tag_to_reduce] > 0:  # –ù–µ —É—Ö–æ–¥–∏–º –≤ –º–∏–Ω—É—Å
                    tag_counts[tag_to_reduce] -= 1
                    print(f"‚ûñ –£–±—Ä–∞–ª–∏ 1 –≤–æ–ø—Ä–æ—Å —É '{tag_to_reduce}' (–ø–µ—Ä–µ–±–æ—Ä: {differences[tag_to_reduce]:.2f})")
                else:
                    break
            else:
                # –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å: –∏—â–µ–º —Ç–µ–≥ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –Ω–µ–¥–æ–±–æ—Ä–æ–º
                tag_to_increase = min(differences.keys(), key=lambda x: differences[x])
                max_available = len(questions_by_tag.get(tag_to_increase, []))
                if tag_counts[tag_to_increase] < max_available:  # –ù–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    tag_counts[tag_to_increase] += 1
                    print(f"‚ûï –î–æ–±–∞–≤–∏–ª–∏ 1 –≤–æ–ø—Ä–æ—Å –∫ '{tag_to_increase}' (–Ω–µ–¥–æ–±–æ—Ä: {differences[tag_to_increase]:.2f})")
                else:
                    break
        
        print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {tag_counts} (—Å—É–º–º–∞: {sum(tag_counts.values())})")
        
        # 5. –í—ã–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å–æ–≥–ª–∞—Å–Ω–æ –ø–ª–∞–Ω—É
        selected_questions = []
        used_question_ids = set()
        
        for tag, count in tag_counts.items():
            if count > 0 and tag in questions_by_tag:
                available_questions = [
                    q for q in questions_by_tag[tag] 
                    if q.get("id") not in used_question_ids
                ]
                
                if available_questions:
                    actual_count = min(count, len(available_questions))
                    tag_questions = random.sample(available_questions, actual_count)
                    selected_questions.extend(tag_questions)
                    
                    # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
                    for q in tag_questions:
                        used_question_ids.add(q.get("id"))
                    
                    print(f"üè∑Ô∏è '{tag}': –≤—ã–±—Ä–∞–Ω–æ {actual_count} –∏–∑ {len(available_questions)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        question_ids = [q.get("id") for q in selected_questions]
        unique_ids = set(question_ids)
        
        if len(question_ids) != len(unique_ids):
            print(f"üö® –û–®–ò–ë–ö–ê: –Ω–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã! {len(question_ids)} –≤–æ–ø—Ä–æ—Å–æ–≤, {len(unique_ids)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö")
        else:
            print(f"‚úÖ –í–°–ï –£–ù–ò–ö–ê–õ–¨–ù–û: {len(selected_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –≤—ã–±—Ä–∞–Ω–æ")
        
        return selected_questions
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {e}")
        return random.sample(questions, min(total_questions, len(questions)))

def get_all_test_sessions() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏–π"""
    try:
        sessions_file = DATA_DIR / "test_sessions.json"
        
        if not sessions_file.exists():
            return {"test_sessions": [], "stats": {}}
        
        with open(sessions_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        test_sessions = data.get("test_sessions", [])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = {
            "total_sessions": len(test_sessions),
            "pending_sessions": len([s for s in test_sessions if s.get("status") == "pending"]),
            "in_progress_sessions": len([s for s in test_sessions if s.get("status") == "in_progress"]),
            "completed_sessions": len([s for s in test_sessions if s.get("status") == "completed"]),
            "by_level": Counter(s.get("level") for s in test_sessions),
            "by_profession": Counter(s.get("profession", {}).get("name") for s in test_sessions)
        }
        
        return {"test_sessions": test_sessions, "stats": stats}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏–π: {e}")
        return {"test_sessions": [], "stats": {}}

def get_test_session_by_id(session_id: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏–∏ –ø–æ ID"""
    try:
        sessions_file = DATA_DIR / "test_sessions.json"
        
        if not sessions_file.exists():
            return None
        
        with open(sessions_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        for session in data.get("test_sessions", []):
            if session["test_session_id"] == session_id:
                return session
        
        return None
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏–∏ {session_id}: {e}")
        return None

async def delete_test_session_by_id(session_id: str) -> bool:
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏–∏ –ø–æ ID"""
    try:
        sessions_file = DATA_DIR / "test_sessions.json"
        
        if not sessions_file.exists():
            return False
        
        with open(sessions_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏—é
        sessions = data.get("test_sessions", [])
        initial_count = len(sessions)
        
        data["test_sessions"] = [session for session in sessions if session["test_session_id"] != session_id]
        
        if len(data["test_sessions"]) == initial_count:
            return False  # –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        with open(sessions_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏–∏ {session_id}: {e}")
        return False

# === –û–ë–ù–û–í–õ–ï–ù–ò–ï –§–£–ù–ö–¶–ò–ò –°–¢–ê–¢–ò–°–¢–ò–ö–ò ===

async def get_user_statistics(user: Dict[str, Any]) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏—è–º–∏)"""
    try:
        records_file = DATA_DIR / "profession_records.json"
        sessions_file = DATA_DIR / "test_sessions.json"
        
        stats = {
            "total_professions": 0,
            "created_by_user": 0,
            "pending_approval": 0,
            "approved": 0,
            "questions_generated": 0,
            "test_sessions_created": 0  # –ù–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏–π
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
        if records_file.exists():
            with open(records_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            for record in data.get("profession_records", []):
                stats["total_professions"] += 1
                
                if record.get("created_by") == user["email"]:
                    stats["created_by_user"] += 1
                
                status = record.get("status", "")
                if status == "tags_generated":
                    stats["pending_approval"] += 1
                elif status == "approved_by_head":
                    stats["approved"] += 1
                elif status == "questions_generated":
                    stats["questions_generated"] += 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏–π
        if sessions_file.exists():
            with open(sessions_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # –°—á–∏—Ç–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç-—Å–µ—Å—Å–∏–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏)
            if user["role"] == "super_admin":
                stats["test_sessions_created"] = len(data.get("test_sessions", []))
            else:
                stats["test_sessions_created"] = len([s for s in data.get("test_sessions", []) 
                                                   if s.get("created_by") == user["email"]])
        
        return stats
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {}

# === –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ===

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ HR Admin Panel v2.0")
    print(f"üåê URL: http://localhost:{APP_PORT}")
    print(f"üìÅ –î–∞–Ω–Ω—ã–µ: {DATA_DIR}")
    print(f"ü§ñ –ò–ò –∞–≥–µ–Ω—Ç—ã: 4 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    print(f"‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ 00:00")
    
    uvicorn.run(
        "main:app",
        host=APP_HOST,
        port=APP_PORT,
        reload=DEBUG,
        log_level="info"
    )