"""
HR Admin Panel v2.0 - –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä
–ü—Ä–æ—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å —É–º–Ω—ã–º–∏ –ò–ò –∞–≥–µ–Ω—Ç–∞–º–∏
"""

import json
import logging
from pathlib import Path
from typing import Dict, Any, Optional, List
from datetime import datetime

# FastAPI
from fastapi import FastAPI, Request, WebSocket, WebSocketDisconnect, Form, File, UploadFile, HTTPException
from fastapi.responses import HTMLResponse, RedirectResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
# from fastapi.middleware.sessions import SessionMiddleware
from starlette.middleware.sessions import SessionMiddleware
import uvicorn

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ —Ä–æ–ª–∏
from config import *
from users import find_user, update_last_login, get_demo_credentials
from roles import (
    get_user_role_name, 
    can_user_create_profession,
    can_user_approve_profession,
    can_user_return_to_hr,
    can_user_view_questions,
    can_user_access_profession,
    PROFESSION_STATUSES
)

# –ò–ò –∞–≥–µ–Ω—Ç—ã
from ai_agents import HRAssistant, TagsGenerator, HeadApproval, QuestionsGenerator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="HR Admin Panel v2.0",
    description="–£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π —Å –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∞–º–∏",
    version="2.0.0"
)

# Middleware –¥–ª—è —Å–µ—Å—Å–∏–π
app.add_middleware(SessionMiddleware, secret_key="hr-admin-panel-v2-secret-key-2025")

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏ —à–∞–±–ª–æ–Ω—ã
app.mount("/static", StaticFiles(directory=STATIC_DIR), name="static")
templates = Jinja2Templates(directory=TEMPLATES_DIR)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ò–ò –∞–≥–µ–Ω—Ç–æ–≤
hr_assistant = HRAssistant(OPENAI_API_KEY, DATA_DIR)
tags_generator = TagsGenerator(OPENAI_API_KEY, DATA_DIR)
head_approval = HeadApproval(OPENAI_API_KEY, DATA_DIR)
questions_generator = QuestionsGenerator(OPENAI_API_KEY, DATA_DIR)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
scheduler = AsyncIOScheduler()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
active_connections: Dict[str, WebSocket] = {}

# === –°–û–ë–´–¢–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ HR Admin Panel v2.0")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
    await update_reference_files()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.start()
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00
    scheduler.add_job(
        func=daily_questions_generation,
        trigger=CronTrigger(hour=0, minute=0),
        id='daily_questions_generation',
        replace_existing=True
    )
    
    logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")

@app.on_event("shutdown")
async def shutdown_event():
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
    scheduler.shutdown()
    logger.info("üí§ HR Admin Panel –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# === –û–°–ù–û–í–ù–´–ï –ú–ê–†–®–†–£–¢–´ ===

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - —Ä–µ–¥–∏—Ä–µ–∫—Ç"""
    return RedirectResponse(url="/login")

@app.get("/login", response_class=HTMLResponse)
async def login_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞"""
    return templates.TemplateResponse("login.html", {
        "request": request,
        "demo_accounts": get_demo_credentials(),
        "organization": ORGANIZATION
    })

@app.post("/login")
async def login(request: Request, email: str = Form(...), password: str = Form(...)):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞"""
    user = find_user(email, password)
    if user:
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
        update_last_login(user["id"], datetime.now().isoformat())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é
        request.session["user"] = user
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª: {user['name']} ({user['email']})")
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if can_user_create_profession(user["role"]):
            return RedirectResponse(url="/create-profession", status_code=303)
        elif can_user_approve_profession(user["role"]):
            return RedirectResponse(url="/pending-approvals", status_code=303)
        elif can_user_view_questions(user["role"]):
            return RedirectResponse(url="/questions", status_code=303)
        else:
            return RedirectResponse(url="/dashboard", status_code=303)
    else:
        logger.warning(f"‚ùå –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: {email}")
        return templates.TemplateResponse("login.html", {
            "request": request,
            "error": "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
            "demo_accounts": get_demo_credentials(),
            "organization": ORGANIZATION
        })

@app.get("/logout")
async def logout(request: Request):
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    user = request.session.get("user")
    if user:
        logger.info(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª: {user['name']}")
    request.session.clear()
    return RedirectResponse(url="/login")

@app.get("/dashboard", response_class=HTMLResponse)
async def dashboard(request: Request):
    """–î–∞—à–±–æ—Ä–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = request.session.get("user")
    if not user:
        return RedirectResponse(url="/login")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stats = await get_user_statistics(user)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–¥–ª—è –Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–≤)
    pending_notifications = []
    if can_user_approve_profession(user["role"]):
        pending_professions = get_pending_professions_for_user(user)
        if pending_professions:
            pending_notifications.append({
                "type": "pending_approvals",
                "count": len(pending_professions),
                "message": f"–£ –≤–∞—Å {len(pending_professions)} –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –æ–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
                "action_url": "/pending-approvals"
            })
    
    return templates.TemplateResponse("dashboard.html", {
        "request": request,
        "user": user,
        "user_role_name": get_user_role_name(user["role"]),
        "stats": stats,
        "notifications": pending_notifications,
        "can_create": can_user_create_profession(user["role"]),
        "can_approve": can_user_approve_profession(user["role"]),
        "can_view_questions": can_user_view_questions(user["role"])
    })

# === –°–û–ó–î–ê–ù–ò–ï –ü–†–û–§–ï–°–°–ò–ô ===

@app.get("/create-profession", response_class=HTMLResponse)
async def create_profession_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"""
    user = request.session.get("user")
    if not user:
        return RedirectResponse(url="/login")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ
    if not can_user_create_profession(user["role"]):
        return templates.TemplateResponse("access_denied.html", {
            "request": request,
            "user": user,
            "user_role_name": get_user_role_name(user["role"]),
            "message": "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π",
            "allowed_roles": ["super_admin", "hr_head_admin"]
        })
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
    reference_data = load_reference_data()
    
    return templates.TemplateResponse("create_profession.html", {
        "request": request,
        "user": user,
        "user_role_name": get_user_role_name(user["role"]),
        "departments": reference_data.get("departments", []),
        "professions": reference_data.get("professions", []),
        "specializations": reference_data.get("specializations", [])
    })

@app.post("/api/analyze-file")
async def analyze_file(request: Request, file: UploadFile = File(...)):
    """–ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    user = request.session.get("user")
    if not user:
        return JSONResponse({"error": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}, status_code=401)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if file.size > MAX_FILE_SIZE:
            return JSONResponse({"error": "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 10MB)"}, status_code=400)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        file_extension = Path(file.filename).suffix.lower()
        if file_extension not in ALLOWED_EXTENSIONS:
            return JSONResponse({"error": f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_extension}"}, status_code=400)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        file_path = UPLOADS_DIR / f"{user['id']}_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{file.filename}"
        
        with open(file_path, "wb") as buffer:
            content = await file.read()
            buffer.write(content)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ HR Assistant
        analysis_result = await hr_assistant.analyze_file(str(file_path))
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        file_path.unlink(missing_ok=True)
        
        logger.info(f"üìÑ –§–∞–π–ª –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {file.filename} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user['name']}")
        return JSONResponse(analysis_result)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {e}")
        return JSONResponse({"error": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {str(e)}"}, status_code=500)

@app.post("/api/analyze-form")
async def analyze_form(request: Request, form_data: dict):
    """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    user = request.session.get("user")
    if not user:
        return JSONResponse({"error": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}, status_code=401)
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ HR Assistant
        analysis_result = await hr_assistant.analyze_form_data(form_data)
        
        return JSONResponse({
            "success": True,
            "analysis": analysis_result
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã: {e}")
        return JSONResponse({"error": str(e)}, status_code=500)

@app.post("/api/create-profession")
async def create_profession(request: Request, profession_data: dict):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ —Å –ø–æ–ª–Ω—ã–º workflow"""
    user = request.session.get("user")
    if not user:
        return JSONResponse({"error": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}, status_code=401)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if not can_user_create_profession(user["role"]):
        return JSONResponse({"error": "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π"}, status_code=403)
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "created_by_hr"
        profession_id = await save_profession(profession_data, user, "created_by_hr")
        
        # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ Tags Generator
        tags_result = await tags_generator.generate_tags(profession_data)
        
        if tags_result.get("success"):
            # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–≥–∏ –∏ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "tags_generated"
            await update_profession_with_tags(profession_id, tags_result, user)
            
            # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–∏–∫—É –æ—Ç–¥–µ–ª–∞
            await notify_department_head(profession_data, profession_id)
            
            logger.info(f"‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {profession_data.get('bank_title')} (ID: {profession_id}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user['name']}")
            
            return JSONResponse({
                "success": True,
                "profession_id": profession_id,
                "tags_count": len(tags_result["tags"]),
                "message": "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞! –¢–µ–≥–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –ò–ò –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–∏–∫—É –æ—Ç–¥–µ–ª–∞."
            })
        else:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ—Ñ–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ —Ç–µ–≥–∏ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã: {tags_result.get('error')}")
            return JSONResponse({
                "success": True,
                "profession_id": profession_id,
                "warning": "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ —Ç–µ–≥–∏ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞."
            })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: {e}")
        return JSONResponse({"error": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {str(e)}"}, status_code=500)

# === –£–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ü–†–û–§–ï–°–°–ò–ô ===

@app.get("/pending-approvals", response_class=HTMLResponse)
async def pending_approvals_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–≤"""
    user = request.session.get("user")
    if not user:
        return RedirectResponse(url="/login")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if not can_user_approve_profession(user["role"]):
        return templates.TemplateResponse("access_denied.html", {
            "request": request,
            "user": user,
            "user_role_name": get_user_role_name(user["role"]),
            "message": "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π",
            "allowed_roles": ["head_admin", "super_admin"]
        })
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    pending_professions = get_pending_professions_for_user(user)
    
    return templates.TemplateResponse("pending_approvals.html", {
        "request": request,
        "user": user,
        "user_role_name": get_user_role_name(user["role"]),
        "professions": pending_professions,
        "total_pending": len(pending_professions)
    })

@app.get("/api/profession/{profession_id}")
async def get_profession_details(profession_id: str, request: Request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"""
    user = request.session.get("user")
    if not user:
        return JSONResponse({"error": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}, status_code=401)
    
    try:
        profession = get_profession_by_id(profession_id)
        if not profession:
            return JSONResponse({"error": "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}, status_code=404)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not can_user_access_profession(user, profession):
            return JSONResponse({"error": "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"}, status_code=403)
        
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞—á–∞–ª—å–Ω–∏–∫, –¥–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –¥–ª—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        if can_user_approve_profession(user["role"]):
            analysis = await head_approval.analyze_profession_for_approval(
                profession_id, user["department"]
            )
            
            return JSONResponse({
                "success": True,
                "profession": profession,
                "analysis": analysis.get("analysis", {}),
                "recommendations": analysis.get("recommendations", []),
                "suggested_actions": analysis.get("suggested_actions", [])
            })
        else:
            return JSONResponse({
                "success": True,
                "profession": profession
            })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ {profession_id}: {e}")
        return JSONResponse({"error": str(e)}, status_code=500)

@app.post("/api/approve-profession/{profession_id}")
async def approve_profession(profession_id: str, request: Request, approval_data: dict):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–º"""
    user = request.session.get("user")
    if not user:
        return JSONResponse({"error": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}, status_code=401)
    
    try:
        profession = get_profession_by_id(profession_id)
        if not profession:
            return JSONResponse({"error": "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}, status_code=404)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not can_user_approve_profession(user["role"]):
            return JSONResponse({"error": "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π"}, status_code=403)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –∏–∑ –æ—Ç–¥–µ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not can_user_access_profession(user, profession):
            return JSONResponse({"error": "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —ç—Ç–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"}, status_code=403)
        
        action = approval_data.get("action")
        
        if action == "approve":
            # –£—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
            corrected_tags = approval_data.get("tags", profession.get("tags", {}))
            comment = approval_data.get("comment", "")
            
            await approve_profession_by_head(profession_id, corrected_tags, user, comment)
            
            logger.info(f"‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {profession_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user['name']}")
            
            return JSONResponse({
                "success": True,
                "message": "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
            })
            
        elif action == "return_to_hr":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É
            return_reason = approval_data.get("return_reason", "")
            return_comment = approval_data.get("return_comment", "")
            
            await return_profession_to_hr(profession_id, return_reason, return_comment, user)
            
            logger.info(f"‚Ü©Ô∏è –ü—Ä–æ—Ñ–µ—Å—Å–∏—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É: {profession_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user['name']}")
            
            return JSONResponse({
                "success": True,
                "message": "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ HR –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ."
            })
        else:
            return JSONResponse({"error": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"}, status_code=400)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ {profession_id}: {e}")
        return JSONResponse({"error": str(e)}, status_code=500)

# === –ü–†–û–°–ú–û–¢–† –í–û–ü–†–û–°–û–í ===

@app.get("/questions", response_class=HTMLResponse)
async def questions_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ - —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∞"""
    user = request.session.get("user")
    if not user:
        return RedirectResponse(url="/login")
    
    # –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å –≤–æ–ø—Ä–æ—Å—ã
    if not can_user_view_questions(user["role"]):
        return templates.TemplateResponse("access_denied.html", {
            "request": request,
            "user": user,
            "user_role_name": get_user_role_name(user["role"]),
            "message": "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤",
            "allowed_roles": ["super_admin"]
        })
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
    questions_data = get_all_questions()
    
    return templates.TemplateResponse("questions.html", {
        "request": request,
        "user": user,
        "user_role_name": get_user_role_name(user["role"]),
        "questions": questions_data["questions"],
        "stats": questions_data["stats"],
        "total_questions": len(questions_data["questions"])
    })

@app.post("/api/generate-questions/{profession_id}")
async def generate_questions_manual(profession_id: str, request: Request):
    """–†—É—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    user = request.session.get("user")
    if not user:
        return JSONResponse({"error": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}, status_code=401)
    
    # –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã
    if not can_user_view_questions(user["role"]):
        return JSONResponse({"error": "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤"}, status_code=403)
    
    try:
        profession = get_profession_by_id(profession_id)
        if not profession:
            return JSONResponse({"error": "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}, status_code=404)
        
        if profession.get("status") != "approved_by_head":
            return JSONResponse({"error": "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è –µ—â–µ –Ω–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"}, status_code=400)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã
        questions_result = await questions_generator.generate_questions_for_profession(profession)
        
        if questions_result.get("success"):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
            await save_profession_questions(profession_id, questions_result["questions"])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await update_profession_status(profession_id, "questions_generated")
            
            logger.info(f"‚ùì –í–æ–ø—Ä–æ—Å—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è {profession_id}: {questions_result['stats']['total_questions']} –≤–æ–ø—Ä–æ—Å–æ–≤")
            
            return JSONResponse({
                "success": True,
                "questions_count": questions_result["stats"]["total_questions"],
                "stats": questions_result["stats"],
                "message": "–í–æ–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!"
            })
        else:
            return JSONResponse({"error": f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {questions_result.get('error')}"}, status_code=500)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è {profession_id}: {e}")
        return JSONResponse({"error": str(e)}, status_code=500)

# === WEBSOCKET –î–õ–Ø –ß–ê–¢–ê ===

@app.websocket("/ws/chat/{user_id}")
async def websocket_chat(websocket: WebSocket, user_id: str):
    """WebSocket –¥–ª—è —á–∞—Ç–∞ —Å –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∞–º–∏"""
    await websocket.accept()
    active_connections[user_id] = websocket
    
    try:
        await websocket.send_text(json.dumps({
            "type": "system",
            "message": "ü§ñ –ò–ò –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω! –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã."
        }))
        
        while True:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            data = await websocket.receive_text()
            message_data = json.loads(data)
            
            user_message = message_data.get("message", "")
            form_context = message_data.get("form_context", {})
            chat_type = message_data.get("chat_type", "hr_assistant")  # hr_assistant, head_approval
            
            # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω–æ–≥–æ –ò–ò –∞–≥–µ–Ω—Ç–∞
            if chat_type == "head_approval":
                ai_response = await head_approval.chat_with_head(user_message, form_context)
            else:
                ai_response = await hr_assistant.chat_with_user(user_message, form_context)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await websocket.send_text(json.dumps({
                "type": "ai_response",
                "message": ai_response.get("message", ""),
                "analysis": ai_response.get("analysis", {}),
                "suggestions": ai_response.get("suggestions", [])
            }))
            
    except WebSocketDisconnect:
        logger.info(f"üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω: {user_id}")
        if user_id in active_connections:
            del active_connections[user_id]
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

async def save_profession(profession_data: Dict[str, Any], user: Dict[str, Any], status: str) -> str:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
        records_file = DATA_DIR / "profession_records.json"
        
        if records_file.exists():
            with open(records_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
        else:
            data = {"profession_records": []}
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        profession_id = f"prof_{len(data['profession_records']) + 1:04d}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ –æ—Ç–¥–µ–ª–∞
        department_head = get_department_head_email(profession_data.get("department", ""))
        
        new_profession = {
            "id": profession_id,
            "bank_title": profession_data.get("bank_title", ""),
            "real_name": profession_data.get("real_name", ""),
            "specialization": profession_data.get("specialization", ""),
            "department": profession_data.get("department", ""),
            "department_head": department_head,
            "created_by": user["email"],
            "created_at": datetime.now().isoformat() + "Z",
            "status": status,
            "tags": {},
            "tags_versions": [],
            "questions": [],
            "workflow_history": [
                {
                    "status": status,
                    "timestamp": datetime.now().isoformat() + "Z",
                    "user": user["email"],
                    "action": "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ HR –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º"
                }
            ]
        }
        
        data["profession_records"].append(new_profession)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with open(records_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        return profession_id
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: {e}")
        raise

async def update_profession_with_tags(profession_id: str, tags_result: Dict[str, Any], user: Dict[str, Any]):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ —Å —Ç–µ–≥–∞–º–∏"""
    try:
        records_file = DATA_DIR / "profession_records.json"
        
        with open(records_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
        for profession in data["profession_records"]:
            if profession["id"] == profession_id:
                profession["tags"] = tags_result["tags"]
                profession["tags_versions"] = [tags_result["tags_version"]]
                profession["status"] = "tags_generated"
                profession["tags_generated_at"] = datetime.now().isoformat() + "Z"
                profession["workflow_history"].append({
                    "status": "tags_generated",
                    "timestamp": datetime.now().isoformat() + "Z",
                    "user": "system",
                    "action": f"–ò–ò —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª {len(tags_result['tags'])} —Ç–µ–≥–æ–≤"
                })
                break
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with open(records_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤: {e}")
        raise

def load_reference_data() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        data = {}
        
        reference_files = ['departments.json', 'professions.json', 'specializations.json', 'bank_titles.json']
        
        for filename in reference_files:
            file_path = DATA_DIR / filename
            if file_path.exists():
                with open(file_path, 'r', encoding='utf-8') as f:
                    key = filename.replace('.json', '')
                    data[key] = json.load(f).get(key, [])
        
        return data
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}

async def update_reference_files():
    """–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –∏–∑ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π"""
    try:
        records_file = DATA_DIR / "profession_records.json"
        
        if not records_file.exists():
            logger.info("üìÅ –§–∞–π–ª profession_records.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤")
            return
        
        with open(records_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∏–∑ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
        approved_records = [
            record for record in data.get("profession_records", [])
            if record.get("status") in ["approved_by_head", "questions_generated", "active"]
        ]
        
        if not approved_records:
            logger.info("üìä –ù–µ—Ç —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤")
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        departments = set()
        professions = set()
        specializations = set()
        bank_titles = set()
        all_tags = set()
        
        for record in approved_records:
            if record.get("department"):
                departments.add(record["department"])
            if record.get("real_name"):
                professions.add(record["real_name"])
            if record.get("specialization"):
                specializations.add(record["specialization"])
            if record.get("bank_title"):
                bank_titles.add(record["bank_title"])
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–≥–∏
            for tag in record.get("tags", {}):
                all_tags.add(tag)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
        reference_data = {
            "professions.json": {"professions": sorted(list(professions))},
            "specializations.json": {"specializations": sorted(list(specializations))},
            "bank_titles.json": {"bank_titles": sorted(list(bank_titles))},
            "tags.json": {"tags": sorted(list(all_tags))}
        }
        
        for filename, content in reference_data.items():
            file_path = DATA_DIR / filename
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(content, f, ensure_ascii=False, indent=2)
        
        logger.info(f"üìä –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {len(professions)} –ø—Ä–æ—Ñ–µ—Å—Å–∏–π, {len(bank_titles)} –Ω–∞–∑–≤–∞–Ω–∏–π, {len(all_tags)} —Ç–µ–≥–æ–≤")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤: {e}")

def get_department_head_email(department: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ email –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ –æ—Ç–¥–µ–ª–∞"""
    try:
        departments_file = DATA_DIR / "departments.json"
        
        if departments_file.exists():
            with open(departments_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                
            for dept in data.get("departments", []):
                if dept["name"] == department:
                    return dept.get("head_email", "unknown@halykbank.kz")
        
        return "unknown@halykbank.kz"
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ –æ—Ç–¥–µ–ª–∞: {e}")
        return "unknown@halykbank.kz"

async def notify_department_head(profession_data: Dict[str, Any], profession_id: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ –æ—Ç–¥–µ–ª–∞"""
    try:
        department_head = get_department_head_email(profession_data.get("department", ""))
        
        logger.info(f"üìß –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ù–ê–ß–ê–õ–¨–ù–ò–ö–£ –û–¢–î–ï–õ–ê: {department_head}")
        logger.info(f"üè¶ –ù–æ–≤–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
        logger.info(f"   ‚Ä¢ ID: {profession_id}")
        logger.info(f"   ‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {profession_data.get('bank_title')}")
        logger.info(f"   ‚Ä¢ –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è: {profession_data.get('real_name')}")
        logger.info(f"   ‚Ä¢ –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: {profession_data.get('department')}")
        logger.info(f"üîó –°—Å—ã–ª–∫–∞: http://localhost:{APP_PORT}/pending-approvals")
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ email
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞: {e}")
        return False

def get_pending_professions_for_user(user: Dict[str, Any]) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    try:
        records_file = DATA_DIR / "profession_records.json"
        
        if not records_file.exists():
            return []
        
        with open(records_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        pending = []
        for record in data.get("profession_records", []):
            if record.get("status") == "tags_generated":
                # –°—É–ø–µ—Ä –∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ
                if user["role"] == "super_admin":
                    pending.append(record)
                # –ù–∞—á–∞–ª—å–Ω–∏–∫ –æ—Ç–¥–µ–ª–∞ –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏
                elif (user["role"] == "head_admin" and 
                      record.get("department") == f"{user['department']} Department"):
                    pending.append(record)
        
        return pending
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π: {e}")
        return []

def get_profession_by_id(profession_id: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –ø–æ ID"""
    try:
        records_file = DATA_DIR / "profession_records.json"
        
        if not records_file.exists():
            return None
        
        with open(records_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        for record in data.get("profession_records", []):
            if record["id"] == profession_id:
                return record
        
        return None
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ {profession_id}: {e}")
        return None

async def approve_profession_by_head(profession_id: str, corrected_tags: Dict[str, int], user: Dict[str, Any], comment: str):
    """–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–º –æ—Ç–¥–µ–ª–∞"""
    try:
        records_file = DATA_DIR / "profession_records.json"
        
        with open(records_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        for record in data["profession_records"]:
            if record["id"] == profession_id:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é —Ç–µ–≥–æ–≤
                new_version = {
                    "version": len(record.get("tags_versions", [])) + 1,
                    "created_by": user["email"],
                    "timestamp": datetime.now().isoformat() + "Z",
                    "action": "–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–º –æ—Ç–¥–µ–ª–∞",
                    "tags": corrected_tags.copy(),
                    "total_tags": len(corrected_tags),
                    "comment": comment,
                    "changes": calculate_tags_changes(record.get("tags", {}), corrected_tags)
                }
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
                record["tags"] = corrected_tags
                record["tags_versions"].append(new_version)
                record["status"] = "approved_by_head"
                record["approved_at"] = datetime.now().isoformat() + "Z"
                record["approved_by"] = user["email"]
                record["approval_comment"] = comment
                record["workflow_history"].append({
                    "status": "approved_by_head",
                    "timestamp": datetime.now().isoformat() + "Z",
                    "user": user["email"],
                    "action": f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —Å {len(corrected_tags)} —Ç–µ–≥–∞–º–∏"
                })
                break
        
        with open(records_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
        await update_reference_files()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: {e}")
        raise

def calculate_tags_changes(old_tags: Dict[str, int], new_tags: Dict[str, int]) -> Dict[str, Any]:
    """–†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ç–µ–≥–∞—Ö"""
    changes = {
        "added": [],
        "removed": [],
        "modified": {},
        "unchanged": []
    }
    
    # –ù–∞–π–¥–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏
    for tag in new_tags:
        if tag not in old_tags:
            changes["added"].append(tag)
    
    # –ù–∞–π–¥–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏
    for tag in old_tags:
        if tag not in new_tags:
            changes["removed"].append(tag)
    
    # –ù–∞–π–¥–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –∏ –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏
    for tag in old_tags:
        if tag in new_tags:
            if old_tags[tag] != new_tags[tag]:
                changes["modified"][tag] = {
                    "from": old_tags[tag],
                    "to": new_tags[tag]
                }
            else:
                changes["unchanged"].append(tag)
    
    return changes

async def return_profession_to_hr(profession_id: str, return_reason: str, return_comment: str, user: Dict[str, Any]):
    """–í–æ–∑–≤—Ä–∞—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É HR"""
    try:
        records_file = DATA_DIR / "profession_records.json"
        
        with open(records_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        for record in data["profession_records"]:
            if record["id"] == profession_id:
                record["status"] = "returned_to_hr"
                record["returned_at"] = datetime.now().isoformat() + "Z"
                record["returned_by"] = user["email"]
                record["return_reason"] = return_reason
                record["return_comment"] = return_comment
                record["workflow_history"].append({
                    "status": "returned_to_hr",
                    "timestamp": datetime.now().isoformat() + "Z",
                    "user": user["email"],
                    "action": f"–í–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É: {return_reason}"
                })
                break
        
        with open(records_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º HR
        await notify_hr_about_return(profession_id, return_reason, return_comment)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: {e}")
        raise

async def notify_hr_about_return(profession_id: str, return_reason: str, return_comment: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ HR –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"""
    logger.info(f"üìß –£–í–ï–î–û–ú–õ–ï–ù–ò–ï HR –û –í–û–ó–í–†–ê–¢–ï: {profession_id}")
    logger.info(f"   ‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: {return_reason}")
    logger.info(f"   ‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {return_comment}")
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ email

async def save_profession_questions(profession_id: str, questions: List[Dict[str, Any]]):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"""
    try:
        records_file = DATA_DIR / "profession_records.json"
        
        with open(records_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        for record in data["profession_records"]:
            if record["id"] == profession_id:
                record["questions"] = questions
                record["questions_generated_at"] = datetime.now().isoformat() + "Z"
                record["workflow_history"].append({
                    "status": "questions_generated",
                    "timestamp": datetime.now().isoformat() + "Z",
                    "user": "system",
                    "action": f"–ò–ò —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤"
                })
                break
        
        with open(records_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        raise

async def update_profession_status(profession_id: str, status: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"""
    try:
        records_file = DATA_DIR / "profession_records.json"
        
        with open(records_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        for record in data["profession_records"]:
            if record["id"] == profession_id:
                record["status"] = status
                record["status_updated_at"] = datetime.now().isoformat() + "Z"
                break
        
        with open(records_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        raise

def get_all_questions() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
    try:
        records_file = DATA_DIR / "profession_records.json"
        
        if not records_file.exists():
            return {"questions": [], "stats": {}}
        
        with open(records_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        all_questions = []
        stats = {"total_questions": 0, "questions_by_difficulty": {"easy": 0, "medium": 0, "hard": 0}}
        
        for record in data.get("profession_records", []):
            if record.get("questions"):
                for question in record["questions"]:
                    question["profession_id"] = record["id"]
                    question["profession_title"] = record["bank_title"]
                    all_questions.append(question)
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    stats["total_questions"] += 1
                    difficulty = question.get("difficulty", "medium")
                    if difficulty in stats["questions_by_difficulty"]:
                        stats["questions_by_difficulty"][difficulty] += 1
        
        return {"questions": all_questions, "stats": stats}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        return {"questions": [], "stats": {}}

async def get_user_statistics(user: Dict[str, Any]) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        records_file = DATA_DIR / "profession_records.json"
        
        if not records_file.exists():
            return {}
        
        with open(records_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        stats = {
            "total_professions": 0,
            "created_by_user": 0,
            "pending_approval": 0,
            "approved": 0,
            "questions_generated": 0
        }
        
        for record in data.get("profession_records", []):
            stats["total_professions"] += 1
            
            if record.get("created_by") == user["email"]:
                stats["created_by_user"] += 1
            
            status = record.get("status", "")
            if status == "tags_generated":
                stats["pending_approval"] += 1
            elif status == "approved_by_head":
                stats["approved"] += 1
            elif status == "questions_generated":
                stats["questions_generated"] += 1
        
        return stats
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {}

# === –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ó–ê–î–ê–ß ===

async def daily_questions_generation():
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ 00:00"""
    try:
        logger.info("üåô –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤")
        
        records_file = DATA_DIR / "profession_records.json"
        
        if not records_file.exists():
            logger.info("üìÅ –ù–µ—Ç —Ñ–∞–π–ª–∞ profession_records.json")
            return
        
        with open(records_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "approved_by_head"
        approved_professions = [
            record for record in data.get("profession_records", [])
            if record.get("status") == "approved_by_head"
        ]
        
        if not approved_professions:
            logger.info("üìä –ù–µ—Ç —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤")
            return
        
        generated_count = 0
        
        for profession in approved_professions:
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã
                questions_result = await questions_generator.generate_questions_for_profession(profession)
                
                if questions_result.get("success"):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
                    await save_profession_questions(profession["id"], questions_result["questions"])
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    await update_profession_status(profession["id"], "questions_generated")
                    
                    generated_count += 1
                    logger.info(f"‚úÖ –í–æ–ø—Ä–æ—Å—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è {profession['id']}: {questions_result['stats']['total_questions']} –≤–æ–ø—Ä–æ—Å–æ–≤")
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è {profession['id']}")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è {profession['id']}: {e}")
        
        logger.info(f"üåô –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {generated_count} –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")

# === –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ===

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ HR Admin Panel v2.0")
    print(f"üåê URL: http://localhost:{APP_PORT}")
    print(f"üìÅ –î–∞–Ω–Ω—ã–µ: {DATA_DIR}")
    print(f"ü§ñ –ò–ò –∞–≥–µ–Ω—Ç—ã: 4 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    print(f"‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ 00:00")
    
    uvicorn.run(
        "main:app",
        host=APP_HOST,
        port=APP_PORT,
        reload=DEBUG,
        log_level="info"
    )