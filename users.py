"""
–ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π HR Admin Panel v2.0
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
"""

# –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã
USERS_DB = [
    {
        "id": 1,
        "email": "JanaydarK@halykbank.kz",
        "name": "–ñ–∞–Ω–∞–π–¥–∞—Ä –ö.",
        "role": "super_admin",
        "password": "123456",
        "department": "IT",
        "phone": "+7 777 123 4567",
        "position": "CTO",
        "created_at": "2024-01-01T00:00:00Z",
        "last_login": None,
        "is_active": True
    },
    {
        "id": 2,
        "email": "DzhamilyaBa@halykbank.kz", 
        "name": "–î–∂–∞–º–∏–ª—è –ë.",
        "role": "hr_head_admin",
        "password": "123456",
        "department": "HR",
        "phone": "+7 777 234 5678",
        "position": "HR Director",
        "created_at": "2024-01-01T00:00:00Z",
        "last_login": None,
        "is_active": True
    },
    {
        "id": 3,
        "email": "FiryzaH@halykbank.kz",
        "name": "–§–∏—Ä—É–∑–∞ –•.",
        "role": "hr_admin", 
        "password": "123456",
        "department": "HR",
        "phone": "+7 777 345 6789",
        "position": "HR Specialist",
        "created_at": "2024-01-01T00:00:00Z",
        "last_login": None,
        "is_active": True
    },
    {
        "id": 4,
        "email": "AlmasNy@halykbank.kz",
        "name": "–ê–ª–º–∞—Å –ù.",
        "role": "head_admin",
        "password": "123456", 
        "department": "IT",
        "phone": "+7 777 456 7890",
        "position": "IT Department Head",
        "created_at": "2024-01-01T00:00:00Z",
        "last_login": None,
        "is_active": True
    }
]

# === –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ===

def find_user(email: str, password: str) -> dict:
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –∏ –ø–∞—Ä–æ–ª—é"""
    for user in USERS_DB:
        if (user["email"].lower() == email.lower() and 
            user["password"] == password and 
            user["is_active"]):
            return user
    return None

def find_user_by_email(email: str) -> dict:
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –ø–æ email"""
    for user in USERS_DB:
        if user["email"].lower() == email.lower():
            return user
    return None

def find_user_by_id(user_id: int) -> dict:
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
    for user in USERS_DB:
        if user["id"] == user_id:
            return user
    return None

def get_users_by_role(role: str) -> list:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ä–æ–ª—å—é"""
    return [user for user in USERS_DB if user["role"] == role and user["is_active"]]

def get_users_by_department(department: str) -> list:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞"""
    return [user for user in USERS_DB if user["department"] == department and user["is_active"]]

def get_department_head(department: str) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞"""
    # –ò—â–µ–º head_admin –≤ —ç—Ç–æ–º –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–µ
    heads = [user for user in USERS_DB 
             if user["role"] == "head_admin" 
             and user["department"] == department 
             and user["is_active"]]
    
    return heads[0] if heads else None

def get_hr_directors() -> list:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö HR –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤"""
    return get_users_by_role("hr_head_admin")

def get_super_admins() -> list:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–æ–≤"""
    return get_users_by_role("super_admin")

def update_last_login(user_id: int, login_time: str) -> bool:
    """–û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞"""
    try:
        for user in USERS_DB:
            if user["id"] == user_id:
                user["last_login"] = login_time
                return True
        return False
    except Exception:
        return False

def deactivate_user(user_id: int) -> bool:
    """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        for user in USERS_DB:
            if user["id"] == user_id:
                user["is_active"] = False
                return True
        return False
    except Exception:
        return False

def activate_user(user_id: int) -> bool:
    """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        for user in USERS_DB:
            if user["id"] == user_id:
                user["is_active"] = True
                return True
        return False
    except Exception:
        return False

def get_active_users_count() -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    return len([user for user in USERS_DB if user["is_active"]])

def get_users_statistics() -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    stats = {
        "total_users": len(USERS_DB),
        "active_users": get_active_users_count(),
        "by_role": {},
        "by_department": {}
    }
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–æ–ª—è–º
    for user in USERS_DB:
        if user["is_active"]:
            role = user["role"]
            dept = user["department"]
            
            stats["by_role"][role] = stats["by_role"].get(role, 0) + 1
            stats["by_department"][dept] = stats["by_department"].get(dept, 0) + 1
    
    return stats

# === –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–• ===

def validate_email(email: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ email"""
    import re
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return bool(re.match(pattern, email))

def validate_password(password: str) -> tuple:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è"""
    if len(password) < 6:
        return False, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    return True, "–ü–∞—Ä–æ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"

def is_email_available(email: str, exclude_user_id: int = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ email"""
    for user in USERS_DB:
        if (user["email"].lower() == email.lower() and 
            user["id"] != exclude_user_id):
            return False
    return True

# === –î–ï–ú–û –î–ê–ù–ù–´–ï ===

def get_demo_credentials() -> list:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ–º–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–æ–≥–∏–Ω–∞"""
    demo_accounts = []
    
    for user in USERS_DB:
        if user["is_active"]:
            demo_accounts.append({
                "email": user["email"],
                "password": user["password"],
                "name": user["name"],
                "role": user["role"],
                "position": user["position"]
            })
    
    return demo_accounts

def get_role_color(role: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è —Ä–æ–ª–∏ (–¥–ª—è UI)"""
    colors = {
        "super_admin": "text-red-700",
        "hr_head_admin": "text-blue-700", 
        "hr_admin": "text-green-700",
        "head_admin": "text-purple-700"
    }
    return colors.get(role, "text-gray-700")

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===

print("‚úÖ –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
print(f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(USERS_DB)}")
print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {get_active_users_count()}")
print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {get_users_statistics()}")